<?xml version="1.0" encoding="utf-8"?>
<s:NavigatorContent xmlns:fx="http://ns.adobe.com/mxml/2009" 
					xmlns:s="library://ns.adobe.com/flex/spark" 
					xmlns:mx="library://ns.adobe.com/flex/mx" width="1004" height="500"
					creationComplete="init()" show="init()" xmlns:skin="app.skin.*">
	
	<fx:Script>
		<![CDATA[
			import app.model.Antropometria;
			import app.model.Atividade;
			import app.model.AtividadeFisica;
			import app.model.Consulta;
			import app.model.DB;
			import app.model.DadosAlimentares;
			import app.model.ExameAdicional;
			import app.model.ExameBioquimico;
			import app.model.MAN;
			import app.model.Refeicao;
			import app.model.ResumoConsulta;
			import app.skin.TextArea;
			import app.skin.TextInput;
			import app.util.General;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.validators.StringValidator;
			import mx.validators.Validator;
			
			import nz.co.codec.flexorm.criteria.Criteria;
			
			import spark.components.HGroup;
			import spark.components.SkinnableContainer;
			import spark.components.TextArea;
			import spark.components.TextInput;
			import spark.components.supportClasses.Skin;
			
			private var focusedFormControl:DisplayObject;
			
			[Bindable]
			private var dateConsulta:String;
			
			private function init():void
			{
				if(General.consultaAtual)
				{
					buidlAll();
				}
			}
			
			private function buildMan():void
			{
				if(General.consultaAtual.man != null) {
					var m:MAN = General.consultaAtual.man ;
					var manTexto:String = "<textformat tabstops='[200, 500, 750]'>" ;
					
					manTexto += "<p><b>Pontos da triagem</b> (subtotal, máximo 14 pontos) </p>" +
						"<p><font size='20'>" + m.pontuacaoTriagem + " pontos</font></p><p></p>" +
						"<p><b>Pontuação</b></p>" +
						"<p><b>Avaliação global </b> (subtotal, máximo 16 pontos) <tab/> <font size='20'>" + m.pontuacaoGlobal + " pontos</font></p>" +
						"<p><b>Pontos da triagem</b> <tab/> <font size='20'>" + m.pontuacaoTriagem + " pontos</font></p>" +
						"<p><b>Pontouação total</b> (subtotal, máximo 30 pontos) <tab/> <font size='20'>" + ( m.pontuacaoTriagem + m.pontuacaoGlobal) + " pontos</font></p>" ;
					
					manTexto += "</textformat>";
					manInfo.htmlText = manTexto ;
					scMAN.visible = scMAN.includeInLayout = true ;
				} else {
					scMAN.visible = scMAN.includeInLayout = false ;
				}
			}
			
			private function buildAntropo():void
			{
				if(General.consultaAtual.antropometria != null)
				{
					var a:Antropometria = General.consultaAtual.antropometria ;
					
					if( a != null ){
						var antroTexto:String = "<textformat tabstops='[300, 400, 700]'><p>";
						
						var campos:Array = [
							{ nome:'PESO', 									valor: a.peso, 							medida:'kg' },
							{ nome:'PESO PRÉ-GESTACIONAL', 					valor: a.pesoPreGestacional, 			medida:'kg' },
							{ nome:'ESTATURA', 								valor: a.estatura, 						medida:'cm' },
							{ nome:'CIRCUNFERÊNCIA DA CINTURA', 			valor: a.circunferenciaCintura, 		medida:'cm' },
							{ nome:'CIRCUNFERÊNCIA DO QUADRIL', 			valor: a.circunferenciaQuadril, 		medida:'cm' },
							{ nome:'CIRCUNFERÊNCIA DO TRÍCEPS', 			valor: a.circunferenciaTriceps, 		medida:'cm' },
							{ nome:'CIRCUNFERÊNCIA DA COXA', 				valor: a.circunferenciaCoxa, 			medida:'cm' },
							{ nome:'CIRCUNFERÊNCIA DA PANTURRILHA', 		valor: a.circunferenciaPanturrilha, 	medida:'cm' },
							{ nome:'DOBRA CUTÂNEA TRICIPTAL', 				valor: a.dobraCutaneaTriciptal, 		medida:'mm' },
							{ nome:'DOBRA CUTÂNEA BICIPTAL', 				valor: a.dobraCutaneaBiciptal, 			medida:'mm' },
							{ nome:'DOBRA CUTÂNEA SUBESCAPULAR', 			valor: a.dobraCutaneaSubescapular, 		medida:'mm' },
							{ nome:'DOBRA CUTÂNEA AXILAR MÉDIA', 			valor: a.dobraCutaneaAxilarMedia, 		medida:'mm' },
							{ nome:'DOBRA CUTÂNEA SUPRA-ILÍACA', 			valor: a.dobraCutaneaSupraIliaca, 		medida:'mm' },
							{ nome:'DOBRA CUTÂNEA TORÁCICA', 				valor: a.dobraCutaneaToracica, 			medida:'mm' },
							{ nome:'DOBRA CUTÂNEA ABDOMINAL', 				valor: a.dobraCutaneaAbdominal, 		medida:'mm' },
							{ nome:'DOBRA CUTÂNEA DA COXA', 				valor: a.dobraCutaneaCoxa, 				medida:'mm' },
							{ nome:'DOBRA CUTÂNEA DA PANTURRILHA MEDIAL', 	valor: a.dobraCutaneaPanturrilhaMedial, medida:'mm' },
							{ nome:'IMC', 									valor: a.imc.toFixed(2), 				medida:'' }
						];
						
						if( ! isNaN(a.circunferenciaCintura) && ! isNaN(a.circunferenciaQuadril) ){
							if( a.circunferenciaCintura > 0 && a.circunferenciaQuadril ){
								campos.push({ nome:'RELAÇÃO CINTURA X QUADRIL', valor: (a.circunferenciaCintura / a.circunferenciaQuadril).toFixed(2), medida: '' })
							}
						}
						
						var lado:uint = 0 ;
						for (var i:int = 0; i < campos.length; i++) 
						{
							var o:Object = campos[i] ;
							if( ! isNaN( o.valor ) ){
								if( o.valor > 0 ){
									antroTexto += "<b>" + o.nome + "</b> <tab/>" + o.valor + ' ' + o.medida ;
									lado ++ ;
									if( lado == 2 ){
										lado = 0 ;
										antroTexto += "</p><p>"
									} else {
										antroTexto += "<tab/>"
									}
								}
							}
						}
					}
					
					antroTexto = antroTexto.substr(0, antroTexto.length - 3) + "</textformat>";
					antroInfo.htmlText = antroTexto;
					scAntropometria.visible = scAntropometria.includeInLayout = true ;
				} else {
					scAntropometria.visible = scAntropometria.includeInLayout = false ;
				}
			}
			
			private function buildAlimentos():void
			{
				if(General.consultaAtual.dadosAlimentares != null) {
					var da:DadosAlimentares = General.consultaAtual.dadosAlimentares ;
					var daTexto:String = "<textformat tabstops='[300, 600]'>" ;
					
					daTexto += '<p><b>Refeição/Horaio<tab/>Alimento<tab/>Quantidade</b></p>' ;
					
					for (var i:int = 0; i < da.refeicoes.length; i++) 
					{
						var r:Refeicao = da.refeicoes[i] ;
						daTexto += '<p>' + r.nome + '<tab/>' + r.alimentos + '<tab/>' + r.quantidades + '</b></p>' ;
					}
					
					daTexto += '<p>&nbsp;</p>' ;
					daTexto += '<p><b>Quantidade de água por dia:</b> ' + da.qtdeAgua + '</p>' ;
					daTexto += '<p><b>Funcionalidade intestinal:</b> ' + da.funcionamentoIntestinal + '</p>' ;
					daTexto += '<p><b>Preferências alimentares:</b> ' + da.preferenciasAlimentares + '</p>' ;
					daTexto += '<p><b>Aversões alimentares:</b> ' + da.aversoesAlimentares + '</p>' ;
					daTexto += '<p><b>Outras informações / Observações:</b> ' + da.observacoes + '</p>' ;
					
					daTexto += "</textformat>";
					alimentosInfo.htmlText = daTexto ;
					scAlimentos.visible = scAlimentos.includeInLayout = true ;
				} else {
					scAlimentos.visible = scAlimentos.includeInLayout = false ;
				}
			}
			
			private function buildExames():void
			{
				if(General.consultaAtual.exameBioquimico != null) {
					var eb:ExameBioquimico = General.consultaAtual.exameBioquimico ;
					var ebTexto:String = "<textformat tabstops='[400, 800]'>" ;
					
					ebTexto += '<p><b>Data da realização dos exames:</b> ' + General.getFormattedDate( eb.dataDoExame ) + '</p>' ;
					ebTexto += '<p><b>Exame<tab/>Valor/Resultado</b></p>' ;
					
					for (var i:int = 0; i < eb.exames.length; i++) 
					{
						var r:ExameAdicional = eb.exames[i] ;
						ebTexto += '<p>' + r.nome + '<tab/>' + r.valor + '</b></p>' ;
					}
					
					ebTexto += "</textformat>";
					examesInfo.htmlText = ebTexto ;
					scExames.visible = scExames.includeInLayout = true ;
				} else {
					scExames.visible = scExames.includeInLayout = false ;
				}
			}
			
			private function buildAtividades():void
			{
				if(General.consultaAtual.atividadeFisica != null) {
					
					var af:AtividadeFisica = General.consultaAtual.atividadeFisica ;
					var afTexto:String = "<textformat tabstops='[300, 600]'>" ;
					
					afTexto += "<p><b>Nível de atividade física: </b>" ;
					switch(af.nivel)
					{
						case AtividadeFisica.MUITO_ATIVO: 	afTexto += "muito ativo"; 	break;
						case AtividadeFisica.ATIVO: 		afTexto += "ativo"; 		break;
						case AtividadeFisica.POUCO_ATIVO: 	afTexto += "pouco ativo"; 	break;
						case AtividadeFisica.SEDENTARIO: 	afTexto += "sedentário"; 	break;
					}
					
					afTexto += '</p>' ;
					
					if( af.atividades.length > 0 ){
						afTexto += '<p><b>Atividades<tab/>Dias da semana<tab/>Horários</b></p>' ;
						
						for (var i:int = 0; i < af.atividades.length; i++) 
						{
							var r:app.model.Atividade = af.atividades[i] ;
							afTexto += '<p>' + r.nome + '<tab/>' + r.dias + '<tab/>' + r.horario + '</b></p>' ;
						}
					}
					
					afTexto += "</textformat>";
					atividadesInfo.htmlText = afTexto ;
					scAtividades.visible = scAtividades.includeInLayout = true ;
				} else {
					scAtividades.visible = scAtividades.includeInLayout = false ;
				}
			}
			
			private function buildMetabolismo():void
			{
				if(General.consultaAtual.resumo != null){
					var r:ResumoConsulta = General.consultaAtual.resumo ;
					
					var rTexto:String = "<textformat tabstops='[300]'>" ;
					
					rTexto += "<p><b>Metabilismo Basal:</b> <tab/>" + r.metabolismoBasal.toFixed(2) + " kcal/dia</p>" +
						"<p><b>Necessidade energética:</b><tab/>" + r.necessidadeEnergetica.toFixed(2) + " kcal/dia</p>" ;
					
					if( General.consultaAtual.semanaGestacional > 12 ){
						rTexto += "<p><b>Necessidade energética gestacional:</b><tab/>" + r.necessidadeEnergeticaGestacional.toFixed(2) + " kcal/dia</p>" ;
					} else {
						if( General.consultaAtual.semanaGestacional > 0 ){
							rTexto += "<p><b>Necessidade energética gestacional:</b><tab/>" + r.necessidadeEnergeticaGestacional.toFixed(2) + " kcal/dia (menos de 12 semanas de gestação)</p>" ;
						}
					}
					
					rTexto += "</textformat>";
					tmbInfo.htmlText = rTexto ;
					scTMB.visible = scTMB.includeInLayout = true ;
				} else {
					scTMB.visible = scTMB.includeInLayout = false ;
				}
			}
			
			private function buidlAll():void
			{
				if( General.consultaAtual.dataConsulta ) dateConsulta = General.getFormattedDate(General.consultaAtual.dataConsulta);
				txtObservacao.text = General.consultaAtual.observacao;
				txtRecomendacoes.text = General.consultaAtual.recomendacoes ;
				
				var cores:Array = [ 0xF6F9FE, 0xFCFDFF ];
				var boxes:Array = [ scTMB, scAntropometria, scMAN, scAlimentos, scAtividades, scExames ];
				
				buildAntropo();
				buildMan();
				buildAlimentos();
				buildAtividades();
				buildExames();
				buildMetabolismo();
				
				var c:uint = 0 ;
				for (var i:int = 0; i < boxes.length; i++) 
				{
					var sc:SkinnableContainer = boxes[i];
					if( sc.visible ){
						sc.setStyle('backgroundColor', cores[ c % 2 ? 0 : 1 ] );
						c++ ;
					}
				}
			}
			
			private function backToList(event:MouseEvent = null):void
			{
				ConsultaHistorico.instance.vsHistoricoConsulta.selectedIndex = 0 ;
			}
			
			private function onImprimirResumo(e:MouseEvent):void
			{
				if( txtRecomendacoes.text != '' ){
					General.consultaAtual.recomendacoes = txtRecomendacoes.text ;
					General.salvaConsulta();
				}
				
				var cr:ConsultaResumo = new ConsultaResumo();
				cr.open();
			}
			
		]]>
	</fx:Script>
	
	
	<s:Group width="984" x="10" y="10">
		<s:Label color="#81BAEA" fontSize="20" styleName="bold" text="{dateConsulta}"/>
		<s:Button right="0" label="CONSULTAS ANTERIORES" skinClass="app.skin.Button" click="backToList(event)" />
		<s:Button y="0" right="202" label="VISUALIZAR IMPRESSÃO" skinClass="app.skin.Button" click="onImprimirResumo(event)"/>
	</s:Group>
		
	<skin:ScrollerSemBug id="scroller" x="0" y="52" width="994" height="438" skinClass="app.skin.Scroller">
		<s:VGroup width="994" height="438" gap="10" paddingBottom="10" paddingLeft="10" paddingRight="0" paddingTop="10">
			<s:SkinnableContainer width="974" backgroundColor="#F6F9FE">
				<s:Label id="txtObservacao" width="974" text="Texto da observação" paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10" />
			</s:SkinnableContainer>
			
			<s:Label color="#81BAEA" fontSize="20" styleName="bold" text="DADOS DA CONSULTA"/>
			
			<s:VGroup id="vgDadosConsulta" width="984">
				<s:SkinnableContainer id="scTMB" width="974" backgroundColor="#FCFDFF">
					<s:VGroup width="974" paddingLeft="10" paddingRight="10" paddingTop="10" paddingBottom="10">
						<s:Label text="METABOLISMO BASAL / NECESSIDADES ENERGÉTICAS" />
						<mx:Text id="tmbInfo" condenseWhite="true" width="974" paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10" />
					</s:VGroup>
				</s:SkinnableContainer>
				
				<s:SkinnableContainer id="scAntropometria" width="974" backgroundColor="#F6F9FE">
					<s:VGroup width="974" paddingLeft="10" paddingRight="10" paddingTop="10" paddingBottom="10">
						<s:Label text="ANTROPOMETRIA"/>
						<mx:Text id="antroInfo" condenseWhite="true" width="974" paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10" />
					</s:VGroup>
				</s:SkinnableContainer>
				
				<s:SkinnableContainer id="scMAN" width="974" backgroundColor="#FCFDFF">
					<s:VGroup width="974" paddingLeft="10" paddingRight="10" paddingTop="10" paddingBottom="10">
						<s:Label text="MAN"/>
						<mx:Text id="manInfo" condenseWhite="true" width="974" paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10" />
					</s:VGroup>
				</s:SkinnableContainer>
				
				<s:SkinnableContainer id="scAlimentos" width="974" backgroundColor="#F6F9FE">
					<s:VGroup width="974" paddingLeft="10" paddingRight="10" paddingTop="10" paddingBottom="10">
						<s:Label text="HÁBITOS ALIMENTARES"/>
						<mx:Text id="alimentosInfo" condenseWhite="true" width="974" paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10" />
					</s:VGroup>
				</s:SkinnableContainer>
				
				<s:SkinnableContainer id="scAtividades" width="974" backgroundColor="#FCFDFF">
					<s:VGroup width="974" paddingLeft="10" paddingRight="10" paddingTop="10" paddingBottom="10">
						<s:Label text="ATIVIDADES FÍSICAS"/>
						<mx:Text id="atividadesInfo" condenseWhite="true" width="974" paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10" />
					</s:VGroup>
				</s:SkinnableContainer>
				
				<s:SkinnableContainer id="scExames" width="974" backgroundColor="#F6F9FE">
					<s:VGroup width="974" paddingLeft="10" paddingRight="10" paddingTop="10" paddingBottom="10">
						<s:Label text="EXAMES BIOQUÍMICOS"/>
						<mx:Text id="examesInfo" condenseWhite="true" width="974" paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10" />
					</s:VGroup>
				</s:SkinnableContainer>
			</s:VGroup>
			
			<s:VGroup width="974">
				<s:Label fontSize="15" styleName="bold" text="RECOMENDAÇÃO DE DIETA:" />
				<s:TextArea id="txtRecomendacoes" width="100%" height="100" skinClass="app.skin.TextArea" />
			</s:VGroup>
		</s:VGroup>
	</skin:ScrollerSemBug>
</s:NavigatorContent>
