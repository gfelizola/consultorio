<?xml version="1.0" encoding="utf-8"?>
<s:NavigatorContent xmlns:fx="http://ns.adobe.com/mxml/2009" 
					xmlns:s="library://ns.adobe.com/flex/spark" 
					xmlns:mx="library://ns.adobe.com/flex/mx" width="984" height="400"
					creationComplete="init(event)" xmlns:view="app.view.*" xmlns:skin="app.skin.*">
	<fx:Script>
		
		<![CDATA[
			import app.model.Constantes;
			import app.model.DB;
			import app.model.Exame;
			import app.model.ExameAdicional;
			import app.model.ExameBioquimico;
			import app.skin.TextArea;
			import app.skin.TextInput;
			import app.util.General;
			import app.util.Helpers;
			
			import as3.utils.Mask;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.UIComponent;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.validators.StringValidator;
			import mx.validators.Validator;
			
			import nz.co.codec.flexorm.criteria.Criteria;
			
			import org.casalib.util.DateUtil;
			
			import spark.components.HGroup;
			import spark.components.SkinnableContainer;
			import spark.components.TextArea;
			import spark.components.TextInput;
			
			private var focusedFormControl:DisplayObject;
			
			[Bindable]
			private var formIsValid:Boolean = true;
			
			[Bindable]
			private var exames:ArrayCollection = Constantes.exames;
			
			[Bindable]
			private var dataDoExame:String = '';
			
			[Bindable]
			private var campos:Object;
			private var colors:Array = [0xF6F9FE,0xFCFDFF];
			private var quantidadeAdicionais:uint = 3;
			
			private function onMouseWheel(e:MouseEvent):void
			{
				e.delta = e.delta > 0 ? 5 : -5;
			}
			
			private function addValidator(f:*,msg:String = "Este campo é obrigatório"):void
			{
				var sv:StringValidator = new StringValidator();
				sv.property = "text";
				sv.required = true;
				sv.requiredFieldError = msg;
				sv.source = f;
				validators.push(sv);
			}
			
			private function getExames():ArrayCollection
			{
				var c:Criteria = DB.em.createCriteria(Exame);
				c.addEqualsCondition("ativo",true);
				return DB.em.fetchCriteria(c);
			}
			
			private function buildForm():void
			{
				var cc:uint = 0;
				var o:Object;
				campos = {};
				
				var exs:ArrayCollection = new ArrayCollection();
				var exsAds:ArrayCollection = new ArrayCollection();
				var ea:ExameAdicional = new ExameAdicional();
				var eNome:String = '';
				var eRef:String = '';
				var eValor:String = '';
				var i:int = 0;
				
				if( General.editandoConsulta ){
					var e:ExameBioquimico = General.consultaAtual.exameBioquimico ;
					if( e ){
						dataDoExame = Helpers.dateFormat( e.dataDoExame );
						exs = e.exames ;
						
						for (i = 0; i < exs.length; i++) 
						{
							ea = exs.getItemAt(i) as ExameAdicional;
							if( ! ea.exame ) exsAds.addItem( ea );
						}
					}
				} else {
					dataDoExame = '' ;
					new Mask( txtDateExame, "99/99/9999");
				}
				
				// Build
				for each(var exame:Exame in exames)
				{
					o = { ex:exame };
					o['sc'] = new SkinnableContainer();
					o['sc'].setStyle("backgroundColor",colors[((cc%2) ? 0 : 1)]);
					o['sc'].width = 435;
					
					o['hg'] = new HGroup();
					o['hg'].paddingTop = o['hg'].paddingRight = o['hg'].paddingBottom = o['hg'].paddingLeft = 5;
					o['hg'].gap = 10;
					
					for (i = 0; i < exs.length; i++) 
					{
						ea = exs.getItemAt(i) as ExameAdicional;
						if( ea.exame ){
							if( ea.exame.id == exame.id ){
								eValor = ea.valor ;
							}
						}
					}
					
					o['nome'] = new Label();
					o['nome'].text = exame.nome;
					o['nome'].width = 135;
					o['referencia'] = new Label();
					o['referencia'].text = exame.referencia;
					o['referencia'].width = 150;
					o['referencia'].styleName = "lightSmall";
					o['valor'] = new spark.components.TextInput();
					o['valor'].setStyle('skinClass', app.skin.TextInput);
					o['valor'].width = 90;
					o['valor'].text = eValor;
					
					o['hg'].addElement(o['nome']);
					o['hg'].addElement(o['referencia']);
					o['hg'].addElement(o['valor']);
					
					o['sc'].addElement(o['hg']);
					
					ExameGroup.addElement(o['sc']);
					campos['banco_'+cc] = o;
					
					cc++;
				}
				
				eNome = '' ;
				eRef = '' ;
				eValor = '' ;
				
				// Campos adicionais
				for(var adicional:uint = 0; adicional < quantidadeAdicionais; adicional++)
				{
					o = { ex:null };
					
					
					o['sc'] = new SkinnableContainer();
					o['sc'].setStyle("backgroundColor",colors[((cc%2) ? 0 : 1)]);
					o['sc'].width = 435;
					o['hg'] = new HGroup();

					o['hg'].paddingTop = o['hg'].paddingRight = o['hg'].paddingBottom = o['hg'].paddingLeft = 5;
					o['hg'].gap = 10;
					
					if( exsAds.length > adicional ){
						ea = exsAds.getItemAt( adicional ) as ExameAdicional;
						eNome = ea.nome ;
						eRef = ea.referencia ;
						eValor = ea.valor ;
					}
					
					o['nome'] = new spark.components.TextInput();
					o['nome'].setStyle('skinClass', app.skin.TextInput);
					o['nome'].prompt = "Exame adicional";
					o['nome'].width = 135;
					o['nome'].text = eNome;
					o['referencia'] = new spark.components.TextArea();
					o['referencia'].setStyle('skinClass', app.skin.TextArea);
					o['referencia'].prompt = "Referência adicional";
					o['referencia'].width = 150;
					o['referencia'].height = 90;
					o['referencia'].text = eRef;
					o['valor'] = new spark.components.TextInput();
					o['valor'].setStyle('skinClass', app.skin.TextInput);
					o['valor'].width = 90;
					o['valor'].text = eValor;
					
					o['hg'].addElement(o['nome']);
					o['hg'].addElement(o['referencia']);
					o['hg'].addElement(o['valor']);
					
					o['sc'].addElement(o['hg']);
					
					ExameGroup.addElement(o['sc']);
					campos['adicional_'+adicional] = o;
					
					cc++;
				}
			}
			
			private function init(event:FlexEvent):void
			{
				if(General.consultaAtual != null)
				{
					dataDoExame = (General.consultaAtual.exameBioquimico != null) ? General.getFormattedDate(General.consultaAtual.exameBioquimico.dataDoExame.toString()) : General.getFormattedDate(new Date());
				}
				
				exames = this.getExames();
				if(exames.length > 0)
				{
					this.buildForm();
				}
				
				scroller.addEventListener(MouseEvent.MOUSE_WHEEL, onMouseWheel, true); 
			}
			
			private function salvar():Boolean
			{
				for(var adicional:uint = 0; adicional < quantidadeAdicionais; adicional++)
				{
					if((campos['adicional_'+adicional].nome.text == '' && campos['adicional_'+adicional].valor.text != ''))
					{
						this.addValidator(campos['adicional_'+adicional].nome);
					}
					
					if((campos['adicional_'+adicional].nome.text != '' && campos['adicional_'+adicional].valor.text == ''))
					{
						this.addValidator(campos['adicional_'+adicional].valor);
					}
				}
				
				var erros:Array = Validator.validateAll(validators);
				formIsValid = (erros.length == 0) ? true : false;
				
				var dataExame:String = txtDateExame.text ;
				
				if( formIsValid ){
					trace( dataExame, Date.parse( dataExame ), Helpers.validateDate( dataExame ) );
					if( ! Helpers.validateDate( dataExame ) ){
						formIsValid = false ;
						Alert.show("A data dos exames é inválida.", "Erro", Alert.OK );
					}
				}
				
				if(!formIsValid)
				{
					Alert.show("Existem erros no formulário. Por favor, valide os campos vermelhos", "Erro", Alert.OK );
					validators.pop();
					return false ;
				}
				else
				{
					var cc:uint = 0;
					var exameCollection:ArrayCollection = new ArrayCollection();
					var ea:ExameAdicional;
					
					for each (var i:Object in campos) 
					{
						if( i['valor'].text != '' )
						{
							ea = new ExameAdicional();
							ea.nome = i['nome'].text;
							ea.referencia = i['referencia'].text;
							ea.valor = i['valor'].text;
							if( i['ex'] ) ea.exame = i['ex'];
							exameCollection.addItem(ea);
							cc++;
						}
					}
					
					if(cc > 0)
					{
						var eb:ExameBioquimico = new ExameBioquimico();
						eb.dataDoExame = dataExame;
						eb.exames = exameCollection;
						
						General.consultaAtual.exameBioquimico = eb;
						General.salvaConsulta();
						
						if( ! impressao.visible ){
							impressao.visible = impressao.includeInLayout = true ;
						} else {
							impressao.init();
						}
					}
					else
					{
						Alert.show("Não há dados de exame para ser salvo!", "Erro", Alert.OK );
						return false ;
					}
				}
				
				return true;
			}
			
			private function onSalvar(e:MouseEvent):void
			{
				salvar();
			}
			
			private function onFinalizar(e:MouseEvent):void
			{
				Alert.yesLabel = 'Sim' ;
				Alert.noLabel = 'Não' ;
				Alert.show("Tem certeza que deseja finalizar a consulta?", "Cuidado", Alert.YES|Alert.NO, null, onAlertFinalizar);
			}
			
			private function onAlertFinalizar(e:CloseEvent):void
			{
				if( e.detail == Alert.YES ){
					if( salvar() ){
						Consulta.instance.abreHistorico();
						General.dispatcher.rebuild();
					}
				}
			}
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<fx:Array id="validators">
			<mx:StringValidator id="valDateExame" source="{txtDateExame}" property="text" required="true" requiredFieldError="O campo Data do Exame é obrigatório" />
		</fx:Array>
		<s:RadioButtonGroup id="NivelAtividade"/>
	</fx:Declarations>
	
	<skin:ScrollerSemBug id="scroller" top="10" bottom="10" left="0" right="0">
		<s:Group>
			<s:VGroup width="100%" gap="20" paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10">
				<s:Label color="#81BAEA" fontSize="20" styleName="bold" text="EXAMES BIOQUÍMICOS" />
				<s:Label width="850" text="Inserção de valores atuais dos principais marcadores bioquímicos para o acompanhamento nutricional, para comparação com valores de referência. É possível adicionar outros exames conforme particularidade do paciente." />
				<s:VGroup gap="10" id="ExameGroup">
					<s:SkinnableContainer width="435" backgroundColor="#F6F9FE">
						<s:HGroup gap="10" paddingTop="5" paddingRight="5" paddingBottom="5" paddingLeft="5" variableColumnWidth="false" verticalAlign="middle">
							<s:Label width="135" text="Tipo do Exame" />
							<s:Label width="150" text="Referência" />
							<s:HGroup width="150" verticalAlign="middle">
								<s:Label text="Data" />
								<s:TextInput width="90" id="txtDateExame" skinClass="app.skin.TextInput" text="{dataDoExame}" restrict="0-9\/" maxChars="10" />
							</s:HGroup>
						</s:HGroup>
					</s:SkinnableContainer>
				</s:VGroup>
				<s:HGroup gap="10">
					<s:Button id="btnSalvar" x="10" y="760" width="230" label="SALVAR E VISUALIZAR DADOS" click="onSalvar(event)" skinClass="app.skin.Button"/>
					<s:Button id="btnFinalizar" x="270" y="760" width="230" label="FINALIZAR CONSULTA" click="onFinalizar(event)" skinClass="app.skin.Button"/>
				</s:HGroup>
			</s:VGroup>
			
			<view:ConsultaImpressa id="impressao" etapa="3" x="525" y="10" visible="false" includeInLayout="false" />
		</s:Group>
	</skin:ScrollerSemBug>
</s:NavigatorContent>
