<?xml version="1.0" encoding="utf-8"?>
<s:NavigatorContent xmlns:fx="http://ns.adobe.com/mxml/2009" 
					xmlns:s="library://ns.adobe.com/flex/spark" 
					xmlns:mx="library://ns.adobe.com/flex/mx" width="1004" height="540"
					creationComplete="init()" xmlns:skin="app.skin.*">
	<fx:Script>
		<![CDATA[
			import app.controller.Navigation;
			import app.enums.EAreas;
			import app.model.Constantes;
			import app.model.DB;
			import app.model.Paciente;
			import app.model.TipoAtendimento;
			import app.util.General;
			
			import as3.utils.Mask;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.IVisualElement;
			import mx.core.UIComponent;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.ValidationResultEvent;
			import mx.managers.IFocusManagerComponent;
			import mx.validators.Validator;
			
			import spark.components.FormItem;
			import spark.events.IndexChangeEvent;
			import spark.layouts.BasicLayout;
			
			[Bindable]
			private var paciente:Paciente = new Paciente();
			
			[Bindable]
			private var bindEstadoArrayCollection:ArrayCollection = Constantes.estados;
			
			[Bindable]
			private var bindEstado:String = paciente.estado;
			
			private var validators:Array;
			
			[Bindable]
			private var sexos:ArrayCollection = new ArrayCollection( new Array(
				{nome: 'Masculino', valor: 'M'},
				{nome: 'Feminino', valor: 'F'}
			) );

			private var etapaVerificacao:int;
			
			[Bindable]
			private var patologias:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			private var historicos:ArrayCollection = new ArrayCollection();
			
			public function atualizaPaciente(p:Paciente):void
			{
				if( p )
				{
					paciente = p;
					patologias = p.patologias as ArrayCollection ;
					historicos = p.historicos as ArrayCollection ;
				
					gpHistorico.visible = ! isNaN( p.id );
					cmbSexo.selectedIndex = p.sexo == 'M' ? 1 : 0 ;
				}
			}
			
			private function init():void
			{
				new Mask(txtTelResidencial, "(99) 9999-99999" );
				new Mask(txtTelComercial, "(99) 9999-99999" );
				new Mask(txtCelular, "(99) 9999-99999" );
				new Mask(txtCEP, "99999-999" );
				new Mask(txtDataNascimento, "99/99/9999" );
				
				dtUltimaMestruacao.dayNames = ['Dom', 'Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'Sab'];
				dtUltimaMestruacao.monthNames = ['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho', 'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'];
				
				validators = new Array();
				validators.push(valNome);
				validators.push(valSobrenome);
				validators.push(valDtNascimento);
				validators.push(valEndereco);
				validators.push(valCidade);
				validators.push(valTelRes);
				validators.push(valEmail);
				validators.push(valSexo);
				validators.push(valEstado);
				
				var p:Paciente = General.pacienteAtual ;
				
				if( p == null )
				{
					return;
				}
				
				atualizaPaciente(p);
			}
			
			private function onSexoChange(e:IndexChangeEvent):void
			{
				gpGestante.visible = cmbSexo.selectedItem.valor == 'F' ;
				gpDados.y = gpGestante.visible ? 431 : 365 ;
			}
			
			private function onGestanteChange(e:Event):void
			{
				gpDataMestruacao.visible = Gestante.selectedValue == 'Sim';
				gpNutriz.visible = Gestante.selectedValue == 'Não';
			}
			
			private function onHistoricoChange(e:IndexChangeEvent):void
			{
				historicos.addItem( cmbHistoricos.selectedItem );
			}
			
			private function onPatologiaChange(e:IndexChangeEvent):void
			{
				patologias.addItem( cmbPatologias.selectedItem );
			}
			
			private function onRemoverPatologias(e:MouseEvent):void
			{
				for (var i:int = lstPatologias.selectedIndices.length - 1; i >= 0; i--) 
				{
					patologias.removeItemAt( lstPatologias.selectedIndices[i] );
				}
			}
			
			private function onRemoverHistoricos(e:MouseEvent):void
			{
				for (var i:int = lstHistoricos.selectedIndices.length - 1; i >= 0 ; i--) 
				{
					historicos.removeItemAt( lstHistoricos.selectedIndices[i] );
				}
			}
			
			private function onSalvar(e:MouseEvent = null):void
			{
				lblResposta.text = "" ;
				
				var erros:Array = Validator.validateAll(validators);
				if (erros.length == 0) {
					
					Alert.noLabel = "Não" ;
					Alert.yesLabel = "Sim" ;
					
					etapaVerificacao = 0;
					
					if( patologias.length < 1 ){
						Alert.show("Você não marcou nenhuma patologia para este paciente. Tem certeza que quer continuar?", "Cuidado", Alert.NO | Alert.YES, null, onAlertClose );
					} else {
						salvarPaciente();
					}
				} else {
					lblResposta.text = "Existem erros no formulário. Verifique os campos vermelhos." ;
					
					var campo:IFocusManagerComponent = IFocusManagerComponent( Validator( ValidationResultEvent(erros[0]).target ).source )
					focusManager.setFocus( campo );
				}
			}
			
			private function onAlertClose(e:CloseEvent):void
			{
				if( e.detail == Alert.YES )
				{
					if( etapaVerificacao == 0 )
					{
						etapaVerificacao = 1 ;
						
						if( historicos.length < 1 ){
							Alert.show("Você não marcou nenhum histórico familiar para este paciente. Tem certeza que quer continuar?", "Cuidado", Alert.NO | Alert.YES, null, onAlertClose );
						} else {
							salvarPaciente();
						}
					} else {
						salvarPaciente();
					}
				} 
			}
			
			private function salvarPaciente():void
			{
				var p:Paciente = new Paciente();
				p.tipo = cmbTipoAtendimento.selectedItem ;
				p.convenio = txtConvenio.text ;
				p.carteira = txtCarteira.text ;
				p.objetivo = txtObjetivo.text ;
				p.indicacao = txtIndicacao.text ;
				p.nome = txtNome.text ;
				p.sobrenome = txtSobrenome.text ;
				p.sexo = cmbSexo.selectedItem.valor ;
				p.dataNascimento = new Date( txtDataNascimento.text ) ;
				p.estadoCivil = cmbEstadoCivil.selectedItem ;
				p.profissao = txtProfissao.text ;
				p.gestante = Gestante.selectedValue == 'Sim' ;
				p.nutriz = Nutriz.selectedValue == 'Sim' ;
				p.dataUltimaMenstruacao = new Date( General.getFormattedDate( dtUltimaMestruacao.text ) );
				p.endereco = txtEndereco.text ;
				p.complemento = txtComplemento.text ;
				p.cidade = txtCidade.text ;
				p.estado = cmbEstados.selectedItem ;
				p.CEP = txtCEP.text ;
				p.telefone = txtTelResidencial.text ;
				p.comercial = txtTelComercial.text ;
				p.celular = txtCelular.text ;
				p.email = txtEmail.text ;
				p.historico = txtHistorico.text ;
				p.patologias = patologias ;
				p.historicos = historicos ;
				p.usuario = General.usuario ;
				
				if( ! isNaN( paciente.id ) ) p.id = paciente.id ;
				
				DB.em.save(p);
				
				General.pacienteAtual = p ;
				Navigation.navega( EAreas.CONSULTA );
			}
			
			private function onTipoAtendimentoChange(e:IndexChangeEvent):void
			{
				var v:Boolean = TipoAtendimento( cmbTipoAtendimento.selectedItem ).nome.indexOf('Conv') > -1 ;
				lblConvenio.visible = v ;
				lblNCarteira.visible = v ;
				txtConvenio.visible = v ;
				txtCarteira.visible = v ;
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:RadioButtonGroup id="Gestante" change="onGestanteChange(event)" selectedValue="{paciente.gestante?'Sim': 'Não'}" />
		<s:RadioButtonGroup id="Nutriz" selectedValue="{paciente.nutriz?'Sim': 'Não'}" />
		
		<mx:StringValidator id="valNome" 			source="{txtNome}" 				property="text" required="true" requiredFieldError="O campo Nome é obrigatório" />
		<mx:StringValidator id="valSobrenome" 		source="{txtSobrenome}" 		property="text" required="true" requiredFieldError="O campo Sobrenome é obrigatório" />
		<mx:StringValidator id="valDtNascimento" 	source="{txtDataNascimento}" 	property="text" required="true" requiredFieldError="O campo Data de Nascimento é obrigatório" />
		<mx:StringValidator id="valEndereco" 		source="{txtEndereco}" 			property="text" required="true" requiredFieldError="O campo Endereço é obrigatório" />
		<mx:StringValidator id="valCidade" 			source="{txtCidade}" 			property="text" required="true" requiredFieldError="O campo Cidade é obrigatório" />
		<mx:StringValidator id="valTelRes" 			source="{txtTelResidencial}" 	property="text" required="true" requiredFieldError="O campo Telefone Residencial é obrigatório" />
		<mx:StringValidator id="valEmail" 			source="{txtEmail}" 			property="text" required="true" requiredFieldError="O campo Email é obrigatório" />
		
		<s:NumberValidator id="valSexo" source="{cmbSexo}" property="selectedIndex" minValue="0" />
		<s:NumberValidator id="valEstado" source="{cmbEstados}" property="selectedIndex" minValue="0" />
	</fx:Declarations>
	
	<skin:ScrollerSemBug id="formScroller" x="10" y="10" width="984" height="520" skinClass="app.skin.Scroller" focusEnabled="false" hasFocusableChildren="true" horizontalCenter="0" verticalCenter="0">
		<s:Group id="formContainer" width="984" height="520">
			
			<s:Label x="10" y="10" color="#83BBEA" fontSize="19" styleName="bold" text="DADOS DA CONSULTA" />
			
			<s:Label x="10" y="50" text="TIPO DE ATENDIMENTO"/>
			<s:ComboBox id="cmbTipoAtendimento" x="10" y="71" width="435" labelField="nome" dataProvider="{Constantes.tiposAtendimentos}" skinClass="app.skin.ComboBox" selectedItem="{paciente.tipo}" change="onTipoAtendimentoChange(event)" />
			
			<s:Label id="lblConvenio" x="490" y="50" text="CONVÊNIO"/>
			<s:TextInput id="txtConvenio" x="490" y="71" width="225" skinClass="app.skin.TextInput" text="{paciente.convenio}" />
			
			<s:Label id="lblNCarteira" x="735" y="50" text="N. DA CARTEIRA"/>
			<s:TextInput id="txtCarteira" x="735" y="71" width="200" skinClass="app.skin.TextInput" text="{paciente.carteira}" />
			
			<s:Label x="10" y="114" text="OBJETIVO DA CONSULTA"/>
			<s:TextInput id="txtObjetivo" x="10" y="135" width="435" skinClass="app.skin.TextInput" text="{paciente.objetivo}"/>
			
			<s:Label x="490" y="114" text="INDICAÇÃO"/>
			<s:TextInput id="txtIndicacao" x="490" y="135" width="435" skinClass="app.skin.TextInput" text="{paciente.indicacao}" />
			
			<s:Label x="10" y="182" color="#83BBEA" fontSize="19" styleName="bold" text="DADOS DO PACIENTE"/>
			
			<s:Label x="10" y="219" text="NOME*"/>
			<s:TextInput id="txtNome" x="10" y="240" width="435" skinClass="app.skin.TextInput" text="{paciente.nome}" />
			
			<s:Label x="490" y="219" text="SOBRENOME*"/>
			<s:TextInput id="txtSobrenome" x="490" y="240" width="435" skinClass="app.skin.TextInput" text="{paciente.sobrenome}" />
			
			<s:Label x="10" y="295" text="SEXO*"/>
			<s:ComboBox id="cmbSexo" x="10" y="316" width="110" labelField="nome" dataProvider="{sexos}" skinClass="app.skin.ComboBox" change="onSexoChange(event)" />
			
			<s:Label x="135" y="295" text="DATA DE NASCIMENTO*"/>
			<s:TextInput id="txtDataNascimento" x="135" y="316" width="309" skinClass="app.skin.TextInput" text="{paciente.dataNascimento}" />
			
			<s:Label x="490" y="295" text="ESTADO CIVIL"/>
			<s:ComboBox id="cmbEstadoCivil" x="490" y="316" width="155" labelField="nome" dataProvider="{Constantes.estadosCivis}" skinClass="app.skin.ComboBox" selectedItem="{paciente.estadoCivil}" />
			
			<s:Label x="665" y="295" text="PROFISSÃO"/>
			<s:TextInput id="txtProfissao" x="665" y="316" width="260" skinClass="app.skin.TextInput" text="{paciente.profissao}" />
			
			<s:Group id="gpGestante" x="10" y="365" width="145" height="57" visible="false">
				<s:Label x="0" y="0" text="É GESTANTE?"/>
				<s:RadioButton id="gestanteSim" x="0" y="20" label="Sim" groupName="Gestante"/>
				<s:RadioButton id="gestanteNao" x="63" y="20" label="Não" groupName="Gestante"/>
			</s:Group>
			
			<s:Group id="gpNutriz" x="210" y="365" width="145" height="57" visible="false">
				<s:Label x="0" y="0" text="É NUTRIZ?"/>
				<s:RadioButton id="nutrizSim" x="0" y="20" label="Sim" groupName="Nutriz"/>
				<s:RadioButton id="nutrizNao" x="63" y="20" label="Não" groupName="Nutriz"/>
			</s:Group>
			
			<s:Group id="gpDataMestruacao" x="210" y="365" width="145" height="57" visible="false">
				<s:Label x="0" y="0" text="Data da última menstruação"/>
				<mx:DateField id="dtUltimaMestruacao" x="0" y="20" contentBackgroundColor="#FFFFFF" text="{paciente.dataUltimaMenstruacao?paciente.dataUltimaMenstruacao.toString():''}" />
			</s:Group>
			
			<s:Group id="gpDados" x="0" y="365" width="100%">
				
				<s:Label x="9" y="2" text="ENDEREÇO*"/>
				<s:TextInput id="txtEndereco" x="9" y="23" width="435" skinClass="app.skin.TextInput" text="{paciente.endereco}" />
				
				<s:Label x="489" y="2" text="COMPLEMENTO"/>
				<s:TextInput id="txtComplemento" x="489" y="23" width="435" skinClass="app.skin.TextInput" text="{paciente.complemento}" />
				
				<s:Label x="9" y="72" text="CIDADE*"/>
				<s:TextInput id="txtCidade" x="9" y="93" width="435" skinClass="app.skin.TextInput" text="{paciente.cidade}" />
				
				<s:Label x="489" y="70" text="ESTADO*"/>
				<s:ComboBox id="cmbEstados" x="489" y="91" width="155" dataProvider="{bindEstadoArrayCollection}" skinClass="app.skin.ComboBox" selectedItem="{bindEstado}" />
				
				<s:Label x="664" y="70" text="CEP"/>
				<s:TextInput id="txtCEP" x="664" y="91" width="260" skinClass="app.skin.TextInput" text="{paciente.CEP}" />
				
				<s:Label x="9" y="142" text="TELEFONE RESIDENCIAL*"/>
				<s:TextInput id="txtTelResidencial" x="9" y="163" width="280" skinClass="app.skin.TextInput" text="{paciente.telefone}" />
				
				<s:Label x="329" y="142" text="TELEFONE COMERCIAL"/>
				<s:TextInput id="txtTelComercial" x="329" y="163" width="280" skinClass="app.skin.TextInput" text="{paciente.comercial}" />
				
				<s:Label x="640" y="142" text="TELEFONE CELULAR"/>
				<s:TextInput id="txtCelular" x="640" y="163" width="284" skinClass="app.skin.TextInput" text="{paciente.celular}" />
				
				<s:Label x="10" y="208" text="E-MAIL*"/>
				<s:TextInput id="txtEmail" x="10" y="229" width="435" skinClass="app.skin.TextInput" text="{paciente.email}" />
				
				<s:Label x="10" y="280" text="HISTÓRICO FAMILIAR"/>
				<s:ComboBox id="cmbHistoricos" x="10" y="301" width="435" labelField="nome" dataProvider="{Constantes.historicos}" skinClass="app.skin.ComboBox" change="onHistoricoChange(event)" />
				<s:List id="lstHistoricos" x="10" y="343" width="435" labelField="nome" dataProvider="{historicos}" borderVisible="false" allowMultipleSelection="true">
					<s:layout>
						<s:VerticalLayout gap="0" horizontalAlign="justify" requestedRowCount="5" />
					</s:layout>
				</s:List>
				<mx:LinkButton x="10" y="458" icon="@Embed('assets/images/remover.png')" label="remover itens selecionados" click="onRemoverHistoricos(event)" />
				
				<s:Label x="493" y="280" text="PATOLOGIAS"/>
				<s:ComboBox id="cmbPatologias" x="493" y="301" width="435" labelField="nome" dataProvider="{Constantes.patologias}" skinClass="app.skin.ComboBox" change="onPatologiaChange(event)" />
				<s:List id="lstPatologias" x="493" y="343" width="435" labelField="nome" dataProvider="{patologias}" borderVisible="false" allowMultipleSelection="true">
					<s:layout>
						<s:VerticalLayout gap="0" horizontalAlign="justify" requestedRowCount="5" />
					</s:layout>
				</s:List>
				<mx:LinkButton x="493" y="458" icon="@Embed('assets/images/remover.png')" label="remover itens selecionados" click="onRemoverPatologias(event)" />
				
				<s:Group x="0" y="500" width="100%" id="gpHistorico" visible="false">
					<s:Label x="10" y="0" color="#83BBEA" fontSize="19" styleName="bold" text="HISTÓRICO" />
					<s:Label x="10" y="30" text="TEXTO EXPLICATIVO DE COMO ESTE CAMPO DEVE SER PREENCHIDO LOREM IPSUM DOLOR SIT AMET, CONSECTETUR ADIPISCING ELIT.&#xd;MAECENAS EROS LECTUS, ALIQUET ORNARE FERMENTUM SIT AMET, ELEMENTUM A RISUS."/>
					<s:TextArea id="txtHistorico" x="10" y="66" width="924" height="167" skinClass="app.skin.TextArea" text="{paciente.historico}" />
				</s:Group>
				
			</s:Group>
			<s:Button id="btnSalvar" x="802" y="{gpDados.y + gpDados.height + 10}" label="SALVAR DADOS" skinClass="app.skin.Button" click="onSalvar(event)"/>
			<s:Label id="lblResposta" x="10" y="{gpDados.y + gpDados.height + 10}" width="780" height="100" color="#FF0000"/>
		</s:Group>
	</skin:ScrollerSemBug>
</s:NavigatorContent>
