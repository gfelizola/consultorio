<?xml version="1.0" encoding="utf-8"?>
<s:NavigatorContent xmlns:fx="http://ns.adobe.com/mxml/2009" 
					xmlns:s="library://ns.adobe.com/flex/spark" 
					xmlns:mx="library://ns.adobe.com/flex/mx" width="750" height="460" show="init()" creationComplete="init()">
	
	<fx:Script>
		<![CDATA[
			import app.controller.Navigation;
			import app.enums.EAreas;
			import app.enums.EDadosGraficos;
			import app.model.AtividadeFisica;
			import app.model.Consulta;
			import app.model.DB;
			import app.model.Paciente;
			import app.util.General;
			import app.util.Helpers;
			import app.util.ImpressaoUtils;
			
			import mx.collections.ArrayCollection;
			import mx.containers.ViewStack;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.formatters.DateFormatter;
			import mx.graphics.Stroke;
			
			import nz.co.codec.flexorm.criteria.Criteria;
			import nz.co.codec.flexorm.criteria.Sort;
			
			import spark.events.IndexChangeEvent;
			
			private var consultas:ArrayCollection;
			
			[Bindable]
			private var minIdade:Number;
			
			[Bindable]
			private var pesos:ArrayCollection;
			
			[Bindable]
			private var tipos:ArrayCollection;
			
			[Bindable]
			private var faixas:ArrayCollection;
			
			[Bindable]
			private var corLinhasCrescimento:uint = 0x81BAEA ;
			
			private function init():void
			{
				var p:Paciente = General.pacienteAtual ;
				if( p == null ) return ;
				
				if( p.dataNascimento ){
					var idade:Number = Math.floor( Helpers.idade(p.dataNascimento) / 12 );
				}
				
				if( idade > 60 ) {
					vsGraficos.selectedIndex = 3 ;
				} else if( idade < 20 ) {
					vsGraficos.selectedIndex = 1 ;
					if( p.sexo == 'F' ) corLinhasCrescimento = 0xe987c3 ;
					
					faixas = new ArrayCollection();
					faixas.addItem({ nome:'NASCIMENTO AOS 2 ANOS', valor:[0,24] });
					faixas.addItem({ nome:'NASCIMENTO AOS 5 ANOS', valor:[0,60] });
					if( idade > 2 ) faixas.addItem({ nome:'2 AOS 5 ANOS', valor:[24,60] });
					if( idade > 5 ){
						faixas.addItem({ nome:'5 AOS 10 ANOS', valor:[60,120] });
						faixas.addItem({ nome:'5 AOS 19 ANOS', valor:[60,228] });
					}
					
					tipos = new ArrayCollection([
						{nome:'PESO x IDADE', valor:1},
						{nome:'ESTATURA x IDADE', valor:2},
						{nome:'IMC x IDADE', valor:3}
					]);
				} else {
					if( p.gestante ) {
						vsGraficos.selectedIndex = 2 ;
					}
				}
				
				var c:Criteria = DB.em.createCriteria(app.model.Consulta);
				c.addEqualsCondition("paciente", p.id );
				c.addSort("dataConsulta", Sort.DESC );
				
				consultas = DB.em.fetchCriteria(c);
				var consulta:app.model.Consulta = General.consultaAtual != null ? General.consultaAtual : consultas.length > 0 ? consultas.getItemAt(0) as app.model.Consulta : null ;
				
				if( consulta )
				{
					if( consulta.man ){
						resultadoMAN.text = consulta.man.estadoNutricionalGlobal.toString() ;
						ImpressaoUtils.criaMAN( consulta, containerMAN, false, 14 );
					}
				}
				
				consultas.source.reverse();
				pesos = new ArrayCollection();
				
				minIdade = 0 ;
				var o:Object = {} ;
				
				for (var i:int = 0; i < consultas.length; i++) 
				{
					var cons:app.model.Consulta = consultas.getItemAt(i) as app.model.Consulta ;
					if( cons.antropometria ){
						
						o = {} ;
						if( cons.dataConsulta ) o.dataConsulta = General.getFormattedDate(cons.dataConsulta) ;
						if( cons.antropometria.peso ) o.peso = cons.antropometria.peso ;
						if( cons.antropometria.imc ) o.imc = cons.antropometria.imc ;
						if( cons.antropometria.estatura ) o.altura = cons.antropometria.estatura ;
						if( cons.semanaGestacional ) o.semana = cons.semanaGestacional ;
						if( cons.idadeNaConsulta() ) o.idade = cons.idadeNaConsulta() ;
						
						pesos.addItem(o);
						
						if( minIdade == 0 ) minIdade = cons.idadeNaConsulta() ;
					}
				}
			}
			
			private function montaAtalah():void
			{
				var atalah:ArrayCollection = new ArrayCollection();
				var tabelaAtalah:Array = EDadosGraficos.ATALAH ;
				
				for (var j:int = 0; j < tabelaAtalah.length; j++) 
				{
					var o:Object = {};
					o.semana = tabelaAtalah[j][0];
					o.baixo = tabelaAtalah[j][1];
					o.ideal = tabelaAtalah[j][3];
					o.sobre = tabelaAtalah[j][5];
					o.imc = 0 ;
					
					for ( var i:int = 0; i < consultas.length; i++) 
					{
						var cons:app.model.Consulta = consultas.getItemAt(i) as app.model.Consulta ;
						if( cons.semanaGestacional ){
							if( cons.semanaGestacional == o.semana ) o.imc = Number( cons.antropometria.imc.toFixed(2) ) ;
						}
					}
					
					atalah.addItem(o);
				}
				curvaDeAtalah.dataProvider = atalah ;
			}
			
			private function atualizaCrescimento():void
			{
				if( cmbIdades.selectedIndex >= 0 && cmbTipo.selectedIndex >= 0 ){
					
					var crescimento:ArrayCollection = new ArrayCollection() ;
					var minSemana:int = cmbIdades.selectedItem.valor[0];
					var maxSemana:int = cmbIdades.selectedItem.valor[1];
					var maxValor:Number = 0 ;
					var minValor:Number = 10000000 ;
					
					var dados:Array = [];
					var p:Paciente = General.pacienteAtual ;
					
					var lsComparado:LineSeries = new LineSeries();
					lsComparado.xField = 'idade' ;
					lsComparado.setStyle("lineStroke", new Stroke(corLinhasCrescimento, 7, 1));
					lsComparado.filterData = true ;
					
					if( p.sexo == 'M' ){ 
						if(cmbTipo.selectedIndex == 0){
							dados = EDadosGraficos.CRESCIMENTO_MASCULINO_PESO_IDADE;
							axisVerticalCrescimento.title = 'PESO (KG)';
							axisVerticalCrescimento.displayName = 'Peso (kg)' ;
							axisHorizontalCrescimento.minimum = minSemana ;
							axisHorizontalCrescimento.maximum = maxSemana > 120 ? 120 : maxSemana ;
							lsComparado.yField = 'peso' ;
							lsComparado.displayName = 'Peso' ;
							
						} else if(cmbTipo.selectedIndex == 1){
							dados = EDadosGraficos.CRESCIMENTO_MASCULINO_ESTATURA_IDADE;
							axisVerticalCrescimento.title = 'ESTATURA (cm)' ;
							axisVerticalCrescimento.displayName = 'Estatura (cm)' ;
							axisHorizontalCrescimento.minimum = minSemana ;
							axisHorizontalCrescimento.maximum = maxSemana ;
							lsComparado.yField = 'estatura' ;
							lsComparado.displayName = 'estatura' ;
							
						} else {
							dados = EDadosGraficos.CRESCIMENTO_MASCULINO_IMC_IDADE;
							axisVerticalCrescimento.title = 'IMC' ;
							axisVerticalCrescimento.displayName = 'IMC' ;
							axisHorizontalCrescimento.minimum = minSemana ;
							axisHorizontalCrescimento.maximum = maxSemana ;
							lsComparado.yField = 'imc' ;
							lsComparado.displayName = 'imc' ;
						}
					} else {
						if(cmbTipo.selectedIndex == 0){
							dados = EDadosGraficos.CRESCIMENTO_FEMININO_PESO_IDADE;
							axisVerticalCrescimento.title = 'PESO (KG)';
							axisVerticalCrescimento.displayName = 'Peso (kg)' ;
							axisHorizontalCrescimento.minimum = minSemana ;
							axisHorizontalCrescimento.maximum = maxSemana > 120 ? 120 : maxSemana ;
							lsComparado.yField = 'peso' ;
							lsComparado.displayName = 'Peso' ;
							
						} else if(cmbTipo.selectedIndex == 1){
							dados = EDadosGraficos.CRESCIMENTO_FEMININO_ESTATURA_IDADE;
							axisVerticalCrescimento.title = 'ESTATURA (cm)' ;
							axisVerticalCrescimento.displayName = 'Estatura (cm)' ;
							axisHorizontalCrescimento.minimum = minSemana ;
							axisHorizontalCrescimento.maximum = maxSemana ;
							lsComparado.yField = 'estatura' ;
							lsComparado.displayName = 'estatura' ;
						} else {
							dados = EDadosGraficos.CRESCIMENTO_FEMININO_IMC_IDADE;
							axisVerticalCrescimento.title = 'IMC' ;
							axisVerticalCrescimento.displayName = 'IMC' ;
							axisHorizontalCrescimento.minimum = minSemana ;
							axisHorizontalCrescimento.maximum = maxSemana ;
							lsComparado.yField = 'imc' ;
							lsComparado.displayName = 'imc' ;
						}
					}
					
					if( dados.length > 0 ){
						var o:Object = {};
						var props:Array = ['idade','p01','p3','p5','p10','p15','p50','p85','p97','p999'];//,'eM3','eM2','eM1','e0','e1','e2','e3'];
						var nomes:Array = ['idade','P 0,1','P 3','P 5','P 10','P 15','P 50','P 85','P 97','P 99,9'];//,'-3','-2','-1','0','1','2','3'];
						
						for (var j:int = 0; j < dados.length; j++) 
						{
							var linha:Array = dados[j] ;
//							o = { peso:0, estatura:0, imc:0 };
							o = {};
							
							if( linha[0] >= minSemana && linha[0] <= maxSemana ) {
								for (var k:int = 0; k < props.length; k++) 
								{
									if(linha.length > k){
										o[props[k]] = linha[k];
										if( linha[k] < minValor && k > 0 ) minValor = linha[k];
										if( linha[k] > maxValor && k > 0 ) maxValor = linha[k];
									}
								}
								
								for ( var i:int = 0; i < consultas.length; i++) 
								{
									var cons:app.model.Consulta = consultas.getItemAt(i) as app.model.Consulta ;
									
									if( cons.idadeNaConsulta() == o.idade ){
										if(cmbTipo.selectedIndex == 0){
											o.peso = cons.antropometria.peso ;
											if( o.peso < minValor ) minValor = o.peso;
											if( o.peso > maxValor ) maxValor = o.peso;
										}
										if(cmbTipo.selectedIndex == 1){
											o.estatura = cons.antropometria.estatura ;
											if( o.estatura < minValor ) minValor = o.estatura;
											if( o.estatura > maxValor ) maxValor = o.estatura;
										}
										if(cmbTipo.selectedIndex == 2){
											o.imc = Number( cons.antropometria.imc.toFixed(2) ) ;
											if( o.imc < minValor ) minValor = o.imc;
											if( o.imc > maxValor ) maxValor = o.imc;
										}
									}
								}
								
								crescimento.addItem(o);
							}
						}
						
						var series:Array = [lsComparado];
						for (var i2:int = 1; i2 < nomes.length; i2++) 
						{
							var ls:LineSeries = new LineSeries();
							ls.displayName = nomes[i2];
							ls.yField = props[i2];
							ls.xField = 'idade';
							ls.alpha = 0.7 ;
							ls.setStyle("lineStroke", new Stroke(corLinhasCrescimento, 2, 0.5));
							
							series.push(ls);
						}
						
						curvaDeCrescimento.series = series ;
					}
					
					curvaDeCrescimento.dataProvider = crescimento ;
					curvaDeCrescimento.visible = true ;
					
					axisVerticalCrescimento.maximum = Math.ceil( maxValor );
					axisVerticalCrescimento.minimum = Math.floor( minValor );
				}
			}
			
			private function onIdadeChange(e:IndexChangeEvent):void
			{
				atualizaCrescimento();
			}
			
			private function onTipoChange(e:IndexChangeEvent):void
			{
				atualizaCrescimento();
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	
	<mx:ViewStack id="vsGraficos" x="0" y="0" width="750" height="460">
		<s:NavigatorContent width="100%" height="100%" label="Peso">
			<s:VGroup gap="5">
				
				<s:Label width="500" color="#81BAEA" fontSize="20" styleName="bold" text="GRÁFICO DE VARIAÇÃO DE PESO"/>
				<s:Label width="500" text="Evolução do peso corporal ao longo do acompanhamento nutricional." />
				
				<mx:LineChart id="curvaDePeso" dataProvider="{pesos}" width="720" height="390" showDataTips="true" seriesFilters="{[]}">
					<mx:horizontalAxis>
						<mx:CategoryAxis categoryField="dataConsulta" title="Data da consulta" />
					</mx:horizontalAxis>
					<mx:verticalAxis>
						<mx:LinearAxis title="Peso" />
					</mx:verticalAxis>
					
					<mx:series>
						<mx:LineSeries displayName="Peso" form="curve" yField="peso">
							<mx:lineStroke>
								<mx:SolidColorStroke color="#81BAEA" weight="7" />
							</mx:lineStroke>
							<mx:itemRenderer>
								<fx:Component>
									<mx:CrossItemRenderer />
								</fx:Component>
							</mx:itemRenderer>
						</mx:LineSeries>
					</mx:series>
				</mx:LineChart>
			</s:VGroup>
		</s:NavigatorContent>
		<s:NavigatorContent width="100%" height="100%" label="Peso">
			<s:VGroup gap="5">
				<s:Label width="500" color="#81BAEA" fontSize="20" styleName="bold" text="CURVA DE CRESCIMENTO"/>
				<s:Label width="740" text="As novas curvas de acompanhamento estabelecem, internacionalmente, um padrão para avaliar o crescimento e estado nutricional de crianças e adolescentes. São preconizadas pela Organização Mundial da Saúde e Ministério da Saúde." />
				<s:HGroup width="100%" height="50" verticalAlign="middle">
					<s:Label text="Faixa etária"/>
					<s:ComboBox id="cmbIdades" skinClass="app.skin.ComboBox" dataProvider="{faixas}" labelField="nome" width="200" change="onIdadeChange(event)" />
					<s:Label text="Tipo do gráfico"/>
					<s:ComboBox id="cmbTipo" skinClass="app.skin.ComboBox" dataProvider="{tipos}" labelField="nome" width="200" change="onTipoChange(event)" />
				</s:HGroup>
				
				<mx:LineChart id="curvaDeCrescimento" dataProvider="{pesos}" width="720" height="300" showDataTips="true" seriesFilters="{[]}" visible="false">
					<mx:backgroundElements>
						<mx:GridLines gridDirection="both" />
					</mx:backgroundElements>
					
					<mx:horizontalAxis>
						<mx:LinearAxis id="axisHorizontalCrescimento" title="IDADE (meses)" displayName="Idade (semanas)" interval="3" />
					</mx:horizontalAxis>
					<mx:verticalAxis>
						<mx:LinearAxis id="axisVerticalCrescimento" title="PESO (kg)" />
					</mx:verticalAxis>
				</mx:LineChart>
				
				<mx:Legend dataProvider="{curvaDeCrescimento}" direction="horizontal" />
			</s:VGroup>
		</s:NavigatorContent>
		<s:NavigatorContent width="100%" height="100%" label="Atalah">
			<s:VGroup gap="5">
				<s:Label width="720" color="#81BAEA" fontSize="20" styleName="bold" text="CURVA DE ATALAH"/>
				<s:Label width="720" text="Trata-se da ferramenta preconizada pela Organização Mundial da Saúde e Ministério da Saúde para avaliar a evolução do Índice de Massa Corporal (IMC) segundo a semana gestacional." />
				
				<mx:AreaChart id="curvaDeAtalah" width="600" height="350" showDataTips="true">
					<mx:horizontalAxis>
						<mx:CategoryAxis categoryField="semana" displayName="SEMANAS DE GESTAÇÃO" />
					</mx:horizontalAxis>
					<mx:verticalAxis>
						<mx:LinearAxis title="IMC" minimum="15" maximum="40" />
					</mx:verticalAxis>
					<mx:series>
						<mx:AreaSeries yField="baixo" displayName="Baixo Peso">
							<mx:areaFill>
								<s:SolidColor color="0xCCCCCC" alpha="0.5" />
							</mx:areaFill>
						</mx:AreaSeries>
						<mx:AreaSeries yField="ideal" displayName="Peso Adequado">
							<mx:areaFill>
								<s:SolidColor color="0xDDDDDD" alpha="0.5"  />
							</mx:areaFill>
						</mx:AreaSeries>
						<mx:AreaSeries yField="sobre" displayName="Sobrepeso">
							<mx:areaFill>
								<s:SolidColor color="0xEEEEEE" alpha="0.5" />
							</mx:areaFill>
						</mx:AreaSeries>
						<mx:AreaSeries yField="imc" displayName="IMC">
							<mx:areaStroke>
								<mx:SolidColorStroke color="0X81BAEA" weight="7" />
							</mx:areaStroke>
							<mx:areaFill>
								<s:SolidColor color="0xFFFFFF" alpha="0" />
							</mx:areaFill>
						</mx:AreaSeries>
					</mx:series>
				</mx:AreaChart>
				<mx:Legend dataProvider="{curvaDeAtalah}" direction="horizontal" />
			</s:VGroup>
		</s:NavigatorContent>
		<s:NavigatorContent width="100%" height="100%" label="MAN">
			<s:VGroup gap="20" width="100%">
				<s:Label width="100%" color="#81BAEA" fontSize="20" styleName="bold" text="RESULTADO DA MINI AVALIAÇÃO NUTRICIONAL"/>
				
				<s:VGroup gap="5" id="containerMAN" width="100%"></s:VGroup>
				
				<s:Label id="resultadoMAN" color="#81BAEA" fontSize="40" styleName="bold" text="" />
			</s:VGroup>
		</s:NavigatorContent>
	</mx:ViewStack>
	
	
</s:NavigatorContent>
