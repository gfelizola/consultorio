<?xml version="1.0" encoding="utf-8"?>
<s:NavigatorContent xmlns:fx="http://ns.adobe.com/mxml/2009" 
					xmlns:s="library://ns.adobe.com/flex/spark" 
					xmlns:mx="library://ns.adobe.com/flex/mx" 
					width="400" height="300" creationComplete="init(event)">
	<fx:Script>
		<![CDATA[
			import app.enums.EDadosGraficos;
			import app.model.Paciente;
			import app.util.General;
			import app.util.Helpers;
			
			import mx.charts.chartClasses.IAxis;
			import mx.charts.renderers.CircleItemRenderer;
			import mx.charts.series.LineSeries;
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			import mx.graphics.SolidColor;
			import mx.graphics.Stroke;
			
			public static const TIPO_PESO:int = 0 ;
			public static const TIPO_ESTATURA:int = 1 ;
			public static const TIPO_IMC:int = 2 ;
			public static const TIPO_PESO_ESTATURA:int = 3 ;
			
			public var consultas:ArrayCollection;
			public var tipo:int;
			
			[Bindable]
			private var corLinhasCrescimento:uint = 0x81BAEA ;
			
			public function atualizaCrescimento():void
			{
					var p:Paciente = General.pacienteAtual ;
					var crescimento:ArrayCollection = new ArrayCollection() ;
					var minSemana:int = 0 ;// cmbIdades.selectedItem.valor[0];
					var maxSemana:int = Math.floor( Helpers.idade(p.dataNascimento) ) + 10;// cmbIdades.selectedItem.valor[1];
					var maxValor:Number = 0 ;
					var minValor:Number = 10000000 ;
					var dados:Array = [];
					
					var lsComparado:LineSeries = new LineSeries();
					lsComparado.xField = 'idade' ;
					lsComparado.radius = 6 ;
					lsComparado.setStyle("lineStroke", new Stroke(corLinhasCrescimento, 5, 1));
					lsComparado.setStyle("stroke", new Stroke(corLinhasCrescimento, 5, 1));
					lsComparado.setStyle("fill", new SolidColor(corLinhasCrescimento, 1));
					lsComparado.setStyle("itemRenderer", new ClassFactory(mx.charts.renderers.CircleItemRenderer));
					lsComparado.filterData = true ;
					
					axisHorizontalCrescimento.title = 'IDADE (meses)' ;
					axisHorizontalCrescimento.displayName = 'IDADE (meses)' ;
//					axisHorizontalCrescimento.labelFunction = calculaLabelMes;
					
					if( p.sexo == 'M' ){ 
						if(tipo == GraficosCrescimento.TIPO_PESO){
							dados = EDadosGraficos.CRESCIMENTO_MASCULINO_PESO_IDADE;
							axisVerticalCrescimento.title = 'PESO (KG)';
							axisVerticalCrescimento.displayName = 'Peso (kg)' ;
							axisHorizontalCrescimento.minimum = minSemana ;
							axisHorizontalCrescimento.maximum = maxSemana > 120 ? 120 : maxSemana ;
							lsComparado.yField = 'peso' ;
							lsComparado.displayName = 'Peso' ;
							
						} else if(tipo == GraficosCrescimento.TIPO_ESTATURA){
							dados = EDadosGraficos.CRESCIMENTO_MASCULINO_ESTATURA_IDADE;
							axisVerticalCrescimento.title = 'ESTATURA (cm)' ;
							axisVerticalCrescimento.displayName = 'Estatura (cm)' ;
							axisHorizontalCrescimento.minimum = minSemana ;
							axisHorizontalCrescimento.maximum = maxSemana ;
							lsComparado.yField = 'estatura' ;
							lsComparado.displayName = 'estatura' ;
							
						} else if(tipo == GraficosCrescimento.TIPO_IMC){
							dados = EDadosGraficos.CRESCIMENTO_MASCULINO_IMC_IDADE;
							axisVerticalCrescimento.title = 'IMC' ;
							axisVerticalCrescimento.displayName = 'IMC' ;
							axisHorizontalCrescimento.minimum = minSemana ;
							axisHorizontalCrescimento.maximum = maxSemana ;
							lsComparado.yField = 'imc' ;
							lsComparado.displayName = 'imc' ;
							
						} else {
							dados = EDadosGraficos.CRESCIMENTO_MASCULINO_PESO_ESTATURA;
							axisVerticalCrescimento.title = 'PESO (kg)' ;
							axisVerticalCrescimento.displayName = 'PESO (kg)' ;
							axisVerticalCrescimento.minimum = 0 ;
							axisVerticalCrescimento.maximum = dados[dados.length-1][9] + 5;
							axisHorizontalCrescimento.title = 'ESTATURA (cm)' ;
							axisHorizontalCrescimento.displayName = 'ESTATURA (cm)' ;
							axisHorizontalCrescimento.minimum = dados[0][0];
							axisHorizontalCrescimento.maximum = dados[dados.length-1][0];
							lsComparado.xField = 'estatura' ;
							lsComparado.yField = 'peso' ;
							lsComparado.displayName = 'peso' ;
						}
					} else {
						if(tipo == GraficosCrescimento.TIPO_PESO){
							dados = EDadosGraficos.CRESCIMENTO_FEMININO_PESO_IDADE;
							axisVerticalCrescimento.title = 'PESO (KG)';
							axisVerticalCrescimento.displayName = 'Peso (kg)' ;
							axisHorizontalCrescimento.minimum = minSemana ;
							axisHorizontalCrescimento.maximum = maxSemana > 120 ? 120 : maxSemana ;
							lsComparado.yField = 'peso' ;
							lsComparado.displayName = 'Peso' ;
							
						} else if(tipo == GraficosCrescimento.TIPO_ESTATURA){
							dados = EDadosGraficos.CRESCIMENTO_FEMININO_ESTATURA_IDADE;
							axisVerticalCrescimento.title = 'ESTATURA (cm)' ;
							axisVerticalCrescimento.displayName = 'Estatura (cm)' ;
							axisHorizontalCrescimento.minimum = minSemana ;
							axisHorizontalCrescimento.maximum = maxSemana ;
							lsComparado.yField = 'estatura' ;
							lsComparado.displayName = 'estatura' ;
							
						} else if(tipo == GraficosCrescimento.TIPO_IMC ){
							dados = EDadosGraficos.CRESCIMENTO_FEMININO_IMC_IDADE;
							axisVerticalCrescimento.title = 'IMC' ;
							axisVerticalCrescimento.displayName = 'IMC' ;
							axisHorizontalCrescimento.minimum = minSemana ;
							axisHorizontalCrescimento.maximum = maxSemana ;
							lsComparado.yField = 'imc' ;
							lsComparado.displayName = 'imc' ;
							
						} else {
							dados = EDadosGraficos.CRESCIMENTO_FEMININO_PESO_ESTATURA;
							axisVerticalCrescimento.title = 'PESO (kg)' ;
							axisVerticalCrescimento.displayName = 'PESO (kg)' ;
							axisVerticalCrescimento.minimum = 0 ;
							axisVerticalCrescimento.maximum = dados[dados.length-1][9] + 5;
							axisHorizontalCrescimento.title = 'ESTATURA (cm)' ;
							axisHorizontalCrescimento.displayName = 'ESTATURA (cm)' ;
							axisHorizontalCrescimento.minimum = dados[0][0];
							axisHorizontalCrescimento.maximum = dados[dados.length-1][0];
							lsComparado.xField = 'estatura' ;
							lsComparado.yField = 'peso' ;
							lsComparado.displayName = 'peso' ;
						}
					}
					
					if( dados.length > 0 ){
						
						var o:Object = {};
						var prop0:String = tipo == 3 ? 'estatura' : 'idade' ;
						var props:Array = [ prop0,'p01','p3','p5','p10','p15','p50','p85','p97','p999'];//,'eM3','eM2','eM1','e0','e1','e2','e3'];
						var nomes:Array = [ prop0,'P 0,1','P 3','P 5','P 10','P 15','P 50','P 85','P 97','P 99,9'];//,'-3','-2','-1','0','1','2','3'];
						
						for (var j:int = 0; j < dados.length; j++) 
						{
							var linha:Array = dados[j] ;
							o = {};
							
							if( ( linha[0] >= minSemana && linha[0] <= maxSemana ) || tipo == GraficosCrescimento.TIPO_PESO_ESTATURA ) {
								for (var k:int = 0; k < props.length; k++) 
								{
									if(linha.length > k){
										o[props[k]] = linha[k];
										if( linha[k] < minValor && k > 0 ) minValor = linha[k];
										if( linha[k] > maxValor && k > 0 ) maxValor = linha[k];
									}
								}
								
								for ( var i:int = 0; i < consultas.length; i++) 
								{
									var cons:app.model.Consulta = consultas.getItemAt(i) as app.model.Consulta ;
									if( cons.antropometria ){
										var adicionaValor:Boolean = false ;
										if( tipo == GraficosCrescimento.TIPO_PESO_ESTATURA ){
											var est:Number = cons.antropometria.estatura ;
											adicionaValor = est >= dados[j][0] ;
											if( j + 1 < dados.length ) adicionaValor = adicionaValor && est < dados[j+1][0] ;
										} else {
											adicionaValor = cons.idadeNaConsulta() == o.idade
										}
										
										if( adicionaValor ){
											if(tipo == GraficosCrescimento.TIPO_PESO || tipo == GraficosCrescimento.TIPO_PESO_ESTATURA){
												o.peso = cons.antropometria.peso ;
												if( o.peso < minValor ) minValor = o.peso;
												if( o.peso > maxValor ) maxValor = o.peso;
											}
											if(tipo == GraficosCrescimento.TIPO_ESTATURA){
												o.estatura = cons.antropometria.estatura ;
												if( o.estatura < minValor ) minValor = o.estatura;
												if( o.estatura > maxValor ) maxValor = o.estatura;
											}
											if(tipo == GraficosCrescimento.TIPO_IMC){
												o.imc = Number( cons.antropometria.imc.toFixed(2) ) ;
												if( o.imc < minValor ) minValor = o.imc;
												if( o.imc > maxValor ) maxValor = o.imc;
											}
										} 
									}
								}
								
								crescimento.addItem(o);
							}
						}
						
						var series:Array = [lsComparado];
						for (var i2:int = 1; i2 < nomes.length; i2++) 
						{
							var ls:LineSeries = new LineSeries();
							ls.displayName = nomes[i2];
							ls.yField = props[i2];
							ls.xField = tipo == GraficosCrescimento.TIPO_PESO_ESTATURA ? 'estatura' : 'idade';
							ls.alpha = 0.7 ;
//							ls.setStyle("lineStroke", new Stroke(corLinhasCrescimento, 2, 0.5));
							
							series.push(ls);
						}
						
						curvaDeCrescimento.series = series ;
					}
					
					curvaDeCrescimento.dataProvider = crescimento ;
					curvaDeCrescimento.visible = true ;
					
					axisVerticalCrescimento.maximum = Math.ceil( maxValor );
					axisVerticalCrescimento.minimum = Math.floor( minValor );
				}
			
			protected function init(event:FlexEvent):void
			{
				if( ! isNaN(tipo) && consultas != null ){
					atualizaCrescimento();
				}
			}
			
			private function calculaLabelMes(labelValue:Object, previousValue:Object, axis:IAxis):String
			{
				var ret:String = String(labelValue); ;
				if( ! isNaN( Number( labelValue ) ) ){
					if( int( labelValue ) % 12 == 0 ){
						ret = '\n' + ( int( labelValue ) / 12 ).toString() ;
					} else {
						ret = ( int( labelValue ) % 12 ).toString();
					}
				} else {
					ret = String(labelValue);
				}
				
				return ret;
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<s:HGroup width="100%" height="100%">
		<mx:LineChart id="curvaDeCrescimento" width="100%" height="100%" showDataTips="true" seriesFilters="{[]}">
			<mx:backgroundElements>
				<mx:GridLines gridDirection="both" />
			</mx:backgroundElements>
			
			<mx:horizontalAxis>
				<mx:LinearAxis id="axisHorizontalCrescimento" title="IDADE (meses)" displayName="Idade (semanas)" alignLabelsToInterval="true" interval="2" />
			</mx:horizontalAxis>
			<mx:horizontalAxisRenderers>
				<mx:AxisRenderer axis="{axisHorizontalCrescimento}" labelGap="0" labelAlign="center" height="90" />
			</mx:horizontalAxisRenderers>
			
			<mx:verticalAxis>
				<mx:LinearAxis id="axisVerticalCrescimento" title="PESO (kg)" />
			</mx:verticalAxis>
		</mx:LineChart>
		
		<mx:Legend dataProvider="{curvaDeCrescimento}" />
	</s:HGroup>
</s:NavigatorContent>
