<?xml version="1.0" encoding="utf-8"?>
<s:NavigatorContent xmlns:fx="http://ns.adobe.com/mxml/2009" 
					xmlns:s="library://ns.adobe.com/flex/spark" 
					xmlns:mx="library://ns.adobe.com/flex/mx" width="460" height="650"
					show="init()" creationComplete="init()">
	
	<fx:Style source="app/style/Estilo.css" />
	
	<fx:Script>
		<![CDATA[
			import app.model.Antropometria;
			import app.model.Atividade;
			import app.model.AtividadeFisica;
			import app.model.Consulta;
			import app.model.DadosAlimentares;
			import app.model.Exame;
			import app.model.ExameAdicional;
			import app.model.ExameBioquimico;
			import app.model.MAN;
			import app.model.Paciente;
			import app.model.Refeicao;
			import app.model.Usuario;
			import app.util.General;
			
			import mx.controls.HRule;
			import mx.events.FlexEvent;
			import mx.printing.FlexPrintJob;
			import mx.printing.FlexPrintJobScaleType;
			
			[Bindable]
			public var etapa:int = 0 ;
			
			[Bindable]
			private var titulos:Array = [];
			
			[Bindable]
			private var usuarioNome:String = '' ;
			
			[Bindable]
			private var usuarioDesc:String = '';
			
			public function init():void
			{
				var usuario:Usuario = General.usuario ;
				var logo:File;
				
				if( usuario.logo != "" )
				{
					logo = File.applicationStorageDirectory.resolvePath("images/" + usuario.logo );
					if( logo.exists ) imgLogo.source = logo.url ;
				}
				
				usuarioNome = 'Dr' ;
				if( usuario.sexo == 'F' ) usuarioNome += 'a' ;
				usuarioNome += '. ' + usuario.nome + ' ' + usuario.sobrenome ;
				
				usuarioDesc = 'CRN: ' + usuario.CRN + ' - REGIONAL: ' + usuario.regional +
					'\n' + usuario.endereco.toUpperCase() + ' - ' + usuario.complemento.toUpperCase() + ', ' + usuario.cidade.toUpperCase() + ' - ' +  usuario.estado.toUpperCase() + '\n' +
					'TEL: ' + usuario.telefone + ' - E-MAIL: ' + usuario.email.toUpperCase() + '\n' +
					'SITE: ' + usuario.site.toUpperCase() ;
				
				titulos = ['ANTROPOMETRIA', 'ATIVIDADES FÍSICAS', 'DADOS ALIMENTARES', 'EXAMES BIOQUÍMICOS', 'MAN - MINI AVALIAÇÃO NUTRICIONAL', 'OBSERVAÇÃO'];
				
				verificaConsultaAtual();
			}
			
			private function verificaConsultaAtual():void
			{
				if( General.pacienteAtual != null ) {
					var p:Paciente = General.pacienteAtual ;
					impNomePaciente.text = p.nomeCompleto.toUpperCase() ;
					impIdadePaciente.text = p.idade + ' ANOS' ;
					impSexoPaciente.text = p.sexo == 'M' ? 'MASCULINO' : 'FEMININO' ;
					antropometria.visible = true ;
				} else {
					impNomePaciente.text = '' ;
					impIdadePaciente.text = '' ;
					impSexoPaciente.text = '' ;
					antropometria.visible = false ;
				}
				
				if( General.consultaAtual != null ){
					var c:app.model.Consulta = General.consultaAtual ;
					impData.text = c.dataConsulta ? General.getFormattedDate( c.dataConsulta.toString() ) : '';	
					
					switch(etapa)
					{
						case 0: 	verificaAntropometria(c);		break;
						case 1: 	verificaAtividadesFisicas(c);	break;
						case 2: 	verificaDadosalimentares(c);	break;
						case 3: 	verificaExames(c);				break;
						case 4: 	verificaMAN(c);					break;
						case 5: 	verificaObservacao(c);			break;
					}
				}
			}
			
			private function verificaAntropometria(c:app.model.Consulta):void
			{
				var a:Antropometria = c.antropometria ;
				
				if( a != null ){
					containerDadosAntropometria.removeAllElements();
					
					var campos:Array = [
						{ nome:'PESO', 									valor: a.peso, 							medida:'kg' },
						{ nome:'PESO PRÉ-GESTACIONAL', 					valor: a.pesoPreGestacional, 			medida:'kg' },
						{ nome:'ESTATURA', 								valor: a.estatura, 						medida:'cm' },
						{ nome:'CIRCUNFERÊNCIA DA CINTURA', 			valor: a.circunferenciaCintura, 		medida:'cm' },
						{ nome:'CIRCUNFERÊNCIA DO QUADRIL', 			valor: a.circunferenciaQuadril, 		medida:'cm' },
						{ nome:'CIRCUNFERÊNCIA DO TRÍCEPS', 			valor: a.circunferenciaTriceps, 		medida:'cm' },
						{ nome:'CIRCUNFERÊNCIA DA COXA', 				valor: a.circunferenciaCoxa, 			medida:'cm' },
						{ nome:'CIRCUNFERÊNCIA DA PANTURRILHA', 		valor: a.circunferenciaPanturrilha, 	medida:'cm' },
						{ nome:'DOBRA CUTÂNEA TRICIPTAL', 				valor: a.dobraCutaneaTriciptal, 		medida:'mm' },
						{ nome:'DOBRA CUTÂNEA BICIPTAL', 				valor: a.dobraCutaneaBiciptal, 			medida:'mm' },
						{ nome:'DOBRA CUTÂNEA SUBESCAPULAR', 			valor: a.dobraCutaneaSubescapular, 		medida:'mm' },
						{ nome:'DOBRA CUTÂNEA AXILAR MÉDIA', 			valor: a.dobraCutaneaAxilarMedia, 		medida:'mm' },
						{ nome:'DOBRA CUTÂNEA SUPRA-ILÍACA', 			valor: a.dobraCutaneaSupraIliaca, 		medida:'mm' },
						{ nome:'DOBRA CUTÂNEA TORÁCICA', 				valor: a.dobraCutaneaToracica, 			medida:'mm' },
						{ nome:'DOBRA CUTÂNEA ABDOMINAL', 				valor: a.dobraCutaneaAbdominal, 		medida:'mm' },
						{ nome:'DOBRA CUTÂNEA DA COXA', 				valor: a.dobraCutaneaCoxa, 				medida:'mm' },
						{ nome:'DOBRA CUTÂNEA DA PANTURRILHA MEDIAL', 	valor: a.dobraCutaneaPanturrilhaMedial, medida:'mm' },
						{ nome:'IMC', 									valor: a.imc.toFixed(2), 			medida:'' }
					];
					
					if( ! isNaN(a.circunferenciaCintura) && ! isNaN(a.circunferenciaQuadril) ){
						if( a.circunferenciaCintura > 0 && a.circunferenciaQuadril ){
							campos.push({ nome:'RELAÇÃO CINTURA X QUADRIL', valor: (a.circunferenciaCintura / a.circunferenciaQuadril).toFixed(2), medida: '' })
						}
					}
					
					for (var i:int = 0; i < campos.length; i++) 
					{
						var o:Object = campos[i] ;
						if( ! isNaN( o.valor ) ){
							if( o.valor > 0 ) containerDadosAntropometria.addElement( getAntropometriaGroup(o.nome, o.valor + ' ' + o.medida) ) ;
						}
					}
				}
			}
			
			private function getAntropometriaGroup( nome:String, valor:String ):Group
			{
				var lNome:Label = new Label();
				lNome.styleName = 'bold' ;
				lNome.x = 0 ;
				lNome.y = 0 ;
				lNome.setStyle('fontSize', 10);
				lNome.text = nome.toUpperCase();
				
				var lValor:Label = new Label();
				lValor.y = 0 ;
				lValor.setStyle('textAlign', 'right');
				lValor.width = 200 ;
				lValor.x = 240 ;
				lValor.setStyle('fontSize', 10);
				lValor.text = valor ;
				
				var rule:HRule = new HRule();
				rule.height = 1 ;
				rule.width = 440 ;
				rule.x = 0 ;
				rule.y = 13 ;
				
				var g:Group = new Group();
				g.height = 14 ;
				g.addElement(lNome);
				g.addElement(lValor);
				g.addElement(rule);

				return g;
			}
			
			private function verificaAtividadesFisicas(c:app.model.Consulta):void
			{
				var af:AtividadeFisica = c.atividadeFisica ;
				if( af ){
					var txtNivel:String = "Nível de atividade física: " ;
					switch(af.nivel)
					{
						case AtividadeFisica.MUITO_ATIVO: 	txtNivel += "muito ativo"; 	break;
						case AtividadeFisica.ATIVO: 		txtNivel += "ativo"; 		break;
						case AtividadeFisica.POUCO_ATIVO: 	txtNivel += "pouco ativo"; 	break;
						case AtividadeFisica.SEDENTARIO: 	txtNivel += "sedentário"; 	break;
					}
					nivelAtividade.text = txtNivel ;
					observacaoAtividade.text = af.observacao ;
					
					containerAtividades.removeAllElements();
					containerAtividades.addElement( getAtividadeGroup("ATIVIDADE FÍSICA", "DIAS DA SEMANA", "HORÁRIO") );
					for (var i:int = 0; i < af.atividades.length; i++) 
					{
						var at:Atividade = af.atividades[i] ;
						containerAtividades.addElement( getAtividadeGroup(at.nome, at.dias, at.horario) );
					}
				}
			}
			
			private function getAtividadeGroup( nome:String, dias:String, horario:String ):Group
			{
				var lNome:Label = new Label();
				lNome.styleName = 'bold' ;
				lNome.x = 0 ;
				lNome.y = 0 ;
				lNome.width = 210 ;
				lNome.setStyle('fontSize', 10);
				lNome.text = nome.toUpperCase();
				
				var lDias:Label = new Label();
				lDias.y = 0 ;
				lDias.x = 210 ;
				lDias.setStyle('textAlign', 'center');
				lDias.width = 180 ;
				lDias.setStyle('fontSize', 10);
				lDias.text = dias ;
				
				var lHorario:Label = new Label();
				lHorario.y = 0 ;
				lHorario.setStyle('textAlign', 'right');
				lHorario.width = 50 ;
				lHorario.x = 390 ;
				lHorario.setStyle('fontSize', 10);
				lHorario.text = horario ;
				
				var rule:HRule = new HRule();
				rule.height = 1 ;
				rule.width = 440 ;
				rule.x = 0 ;
				rule.y = 13 ;
				
				var g:Group = new Group();
				g.height = 14 ;
				g.addElement(lNome);
				g.addElement(lDias);
				g.addElement(lHorario);
				g.addElement(rule);
				
				return g;
			}
			
			private function verificaDadosalimentares(c:app.model.Consulta):void
			{
				var da:DadosAlimentares = c.dadosAlimentares ;
				if( da ){
					containerRefeicoes.removeAllElements();
					containerRefeicoes.addElement( getRefeicaoGroup( 'REFEIÇÃO/HORARIO', 'ALIMENTO', 'QUANTIDADE' ) ) ;
					
					for (var i:int = 0; i < da.refeicoes.length; i++) 
					{
						var r:Refeicao = da.refeicoes[i] ;
						containerRefeicoes.addElement( getRefeicaoGroup( r.nome, r.alimentos, r.quantidades ) ) ;
					}
					
					containerRefeicoes.addElement( getLinhaGroup( 'QUANTIDADE DE ÁGUA POR DIA', da.qtdeAgua ) ) ;
					containerRefeicoes.addElement( getLinhaGroup( 'FUNCIONALIDADE INTESTINAL', da.funcionamentoIntestinal ) ) ;
					containerRefeicoes.addElement( getLinhaGroup( 'PREFERÊNCIAS ALIMENTARES', da.preferenciasAlimentares ) ) ;
					containerRefeicoes.addElement( getLinhaGroup( 'AVERSÕES ALIMENTARES', da.aversoesAlimentares ) ) ;
					containerRefeicoes.addElement( getLinhaGroup( 'OUTRAS INFORMAÇÕES / OBSERVAÇÕES', da.observacoes ) ) ;
				}
			}
			
			private function getRefeicaoGroup( nome:String, alimentos:String, qtdes:String ):Group
			{
				var lNome:Label = new Label();
				lNome.styleName = 'bold' ;
				lNome.x = 0 ;
				lNome.y = 0 ;
				lNome.width = 160 ;
				lNome.setStyle('fontSize', 10);
				lNome.text = nome.toUpperCase();
				
				var lAlimentos:Label = new Label();
				lAlimentos.y = 0 ;
				lAlimentos.x = 160 ;
				lAlimentos.setStyle('textAlign', 'center');
				lAlimentos.width = 180 ;
				lAlimentos.setStyle('fontSize', 10);
				lAlimentos.text = alimentos ;
				
				var lQtdes:Label = new Label();
				lQtdes.y = 0 ;
				lQtdes.setStyle('textAlign', 'right');
				lQtdes.width = 100 ;
				lQtdes.x = 340 ;
				lQtdes.setStyle('fontSize', 10);
				lQtdes.text = qtdes ;
				
				var rule:HRule = new HRule();
				rule.height = 1 ;
				rule.width = 440 ;
				rule.x = 0 ;
				
				var g:Group = new Group();
				g.addElement(lNome);
				g.addElement(lAlimentos);
				g.addElement(lQtdes);
				
				var vg:VGroup = new VGroup();
				vg.gap = 3 ;
				vg.addElement(g);
				vg.addElement(rule);
				
				return vg;
			}
			
			private function getLinhaGroup( titulo:String, valor:String ):Group
			{
				var lTitulo:Label = new Label();
				lTitulo.styleName = 'bold' ;
				lTitulo.x = 0 ;
				lTitulo.width = 440 ;
				lTitulo.setStyle('fontSize', 10);
				lTitulo.text = titulo.toUpperCase();
				
				var lValor:Label = new Label();
				lValor.x = 0 ;
				lValor.width = 440 ;
				lValor.setStyle('fontSize', 10);
				lValor.text = valor;
				
				var vg:VGroup = new VGroup();
				vg.addElement(lTitulo);
				vg.addElement(lValor);
				
				return vg;
			}
			
			private function verificaExames(c:app.model.Consulta):void
			{
				var eb:ExameBioquimico = c.exameBioquimico ;
				if( eb ){
					containerExames.removeAllElements();
					
					containerExames.addElement( getExameGroup( 'EXAME', 'REFERÊNCIA', General.getFormattedDate( eb.dataDoExame.toString() ) ) ) ;
					
					for (var i:int = 0; i < eb.exames.length; i++) 
					{
						var e:ExameAdicional = eb.exames[i] ;
						containerExames.addElement( getExameGroup( e.nome, e.referencia, e.valor ) ) ;
					}
				}
			}
			
			private function getExameGroup( nome:String, referencia:String, resultado:String ):Group
			{
				var lNome:Label = new Label();
				lNome.styleName = 'bold' ;
				lNome.x = 0 ;
				lNome.y = 0 ;
				lNome.width = 160 ;
				lNome.setStyle('fontSize', 10);
				lNome.text = nome.toUpperCase();
				
				var lAlimentos:Label = new Label();
				lAlimentos.y = 0 ;
				lAlimentos.x = 160 ;
				lAlimentos.setStyle('textAlign', 'center');
				lAlimentos.width = 180 ;
				lAlimentos.setStyle('fontSize', 10);
				lAlimentos.text = referencia ;
				
				var lQtdes:Label = new Label();
				lQtdes.y = 0 ;
				lQtdes.setStyle('textAlign', 'right');
				lQtdes.width = 100 ;
				lQtdes.x = 340 ;
				lQtdes.setStyle('fontSize', 10);
				lQtdes.text = resultado ;
				
				var rule:HRule = new HRule();
				rule.height = 1 ;
				rule.width = 440 ;
				rule.x = 0 ;
				
				var g:Group = new Group();
				g.addElement(lNome);
				g.addElement(lAlimentos);
				g.addElement(lQtdes);
				
				var vg:VGroup = new VGroup();
				vg.gap = 3 ;
				vg.addElement(g);
				vg.addElement(rule);
				
				return vg;
			}
			
			private function verificaMAN(c:app.model.Consulta):void
			{
				var man:MAN = c.man ;
				if( man ){
					var p:Number = man.pontuacaoTriagem ;
					var resultado:String = sPontos(man.pontuacaoTriagem) + ' - Estado nutricional: ' ;
					
					if( p < 8 ){
						resultado += 'DESNUTRIDO' ;
					} else if( p >= 8 && p < 12 ){
						resultado += 'SOB RISCO DE DESNUTRIÇÃO' ;
					} else {
						resultado += 'NORMAL' ;
					}
					
					txtPontosTriagem.text = sPontos(man.pontuacaoTriagem) ;
					txtResultadoTriagem.text = resultado ;
					
					p = man.pontuacaoGlobal ;
					var resultadoGlobal:String = '' ;
					
					if( p < 8 ){
						resultadoGlobal += 'DESNUTRIDO' ;
					} else if( p >= 8 && p < 12 ){
						resultadoGlobal += 'SOB RISCO DE DESNUTRIÇÃO' ;
					} else {
						resultadoGlobal += 'NORMAL' ;
					}
					
					txtPontosTriagem.text = sPontos(man.pontuacaoTriagem) ;
					txtPontosGlobal.text = sPontos(man.pontuacaoGlobal) ;
					txtPontuacaoFinal.text = sPontos( man.pontuacaoGlobal + man.pontuacaoTriagem) ;
					txtEstadoNutricional.text = resultadoGlobal ;
				}
			}
			
			private function verificaObservacao(c:app.model.Consulta):void
			{
				if( c.observacao != '' ){
					textoObservacao.text = c.observacao ;
				}
			}
			
			private function onImprimir(e:MouseEvent):void
			{
				btnImprimir.visible = false ;
				scImpressao.setStyle('backgroundColor', '0xffffff');
				
				var pj:FlexPrintJob = new FlexPrintJob();
				pj.start();
				
				pj.addObject( scImpressao, FlexPrintJobScaleType.SHOW_ALL );
				pj.send();
				
				btnImprimir.visible = true ;
				scImpressao.setStyle('backgroundColor', '0xF6FAFE');
			}
			
			private function sPontos(p:int):String
			{
				return p + ( p > 1 ? ' pontos' : ' ponto') ;
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:SkinnableContainer id="scImpressao" x="0" y="0" width="460" height="650" backgroundColor="#F6FAFE">
		<s:Image id="imgLogo" x="10" y="10" width="326" height="60" scaleMode="letterbox" horizontalAlign="left" />
		<s:Button id="btnImprimir" x="344" y="10" label="IMPRIMIR" icon="assets/images/icoImprimir.png" skinClass="app.skin.Button" click="onImprimir(event)"/>
		
		<s:Label id="impTitulo" x="10" y="77" color="#83BBEA" fontSize="19" styleName="bold" text="{titulos[etapa]}"/>
		<s:Label id="impData" x="285" y="84" width="145" styleName="bold" text="17/02/2012" textAlign="right"/>
		
		<s:Label x="10" y="107" styleName="bold" text="NOME:"/>
		<s:Label id="impNomePaciente" x="53" y="110" width="156" styleName="light" text="Aline Maciel"/>
		
		<s:Label x="217" y="107" styleName="bold" text="IDADE:"/>
		<s:Label id="impIdadePaciente" x="263" y="110" width="56" styleName="light" text="120 anos"/>
		
		<s:Label x="327" y="107" styleName="bold" text="SEXO:"/>
		<s:Label id="impSexoPaciente" x="364" y="110" width="86" styleName="light" text="MASCULINO"/>
		
		<mx:ViewStack id="conteudos" x="0" y="134" width="460" height="573" selectedIndex="{etapa}">
			<s:NavigatorContent id="antropometria">
				<s:VGroup id="containerDadosAntropometria" x="10" y="0" width="440" gap="10" />
			</s:NavigatorContent>
			
			<s:NavigatorContent id="atividadeFisica">
				<s:VGroup gap="20" x="10">
					<s:Label id="nivelAtividade" width="440" styleName="bold" text="Nível de atividade física: ativo" />
					<s:VGroup id="containerAtividades" width="440" gap="10" />
					<s:Label id="observacaoAtividade" width="440" text="" />
				</s:VGroup>
			</s:NavigatorContent>
			
			<s:NavigatorContent id="dadosAlimentares">
				<s:VGroup id="containerRefeicoes" gap="10" x="10">
					<s:Label styleName="bold" text="RECORDATÓRIO ALIMENTAR HABITUAL" />
				</s:VGroup>
			</s:NavigatorContent>
			
			<s:NavigatorContent id="examesBioquimicos">
				<s:VGroup id="containerExames" gap="10" x="10">
				</s:VGroup>
			</s:NavigatorContent>
			
			<s:NavigatorContent id="man">
				<s:VGroup id="containerMAN" x="10" width="440" gap="10">
					<s:VGroup>
						<s:HGroup>
							<s:Label fontSize="10" text="Pontos da triagem"/>
							<s:Label fontSize="9" text="(subtotal máximo de 14 pontos)"/>
						</s:HGroup>
						<mx:HRule width="440"/>
						<s:Label id="txtResultadoTriagem" x="10" y="46" width="415" fontSize="12" styleName="bold" text="8 pontos - Estado nutricional: DESNUTRIDO"/>
					</s:VGroup>
					<s:VGroup>
						<s:Label text="Pontuação"/>
						<mx:HRule width="440"/>
						
						<s:Group width="440">
							<s:Label fontSize="11" styleName="bold" text="Avaliação global"/>
							<s:Label x="90" y="4" fontSize="9" styleName="light" text="(máximo 16 pontos)"/>
							<s:Label right="0" id="txtPontosGlobal" fontSize="10" text="15 pontos" textAlign="right"/>
						</s:Group>
						
						<s:Group width="440">
							<s:Label fontSize="11" styleName="bold" text="Pontos da triagem"/>
							<s:Label right="0" id="txtPontosTriagem" fontSize="10" text="13 pontos" textAlign="right"/>
						</s:Group>
						
						<s:Group width="440">
							<s:Label fontSize="11" styleName="bold" text="Pontos total"/>
							<s:Label x="70" y="5" fontSize="9" styleName="light" text="{máximo 30 pontos)"/>
							<s:Label right="0" id="txtPontuacaoFinal" fontSize="10" text="28 pontos" textAlign="right"/>
						</s:Group>
						
						<mx:HRule width="440"/>
						
						<s:HGroup>
							<s:Label text="Avaliação do estado nutricional"/>
							<s:Label id="txtEstadoNutricional" fontSize="10" styleName="bold" text="NORMAL"/>
						</s:HGroup>
					</s:VGroup>
				</s:VGroup>
			</s:NavigatorContent>
			
			<s:NavigatorContent id="observacoes">
				<s:Group width="440">
					<s:Label id="textoObservacao" x="10" width="440" styleName="light" />
				</s:Group>
			</s:NavigatorContent>
		</mx:ViewStack>
		
		<s:Group id="gDados" left="10" bottom="10" right="10">
			<s:Label width="100%" text="{usuarioNome}" styleName="bold" fontSize="11" textAlign="center" />
			<s:Label width="100%" y="20" lineHeight="12" text="{usuarioDesc}" styleName="light" fontSize="10" textAlign="center" />
		</s:Group> 
	</s:SkinnableContainer>
	<!-- 
	<s:Group id="versaoreal" x="100" y="0" width="2480" height="3508" scaleX="0.3" scaleY="0.3" >
		<s:Image id="imgLogoGrande" x="50" y="50" width="80%" height="10%" scaleMode="letterbox" horizontalAlign="left" />
	</s:Group>
	-->
</s:NavigatorContent>
