<?xml version="1.0" encoding="utf-8"?>
<s:NavigatorContent xmlns:fx="http://ns.adobe.com/mxml/2009" 
					xmlns:s="library://ns.adobe.com/flex/spark" 
					xmlns:mx="library://ns.adobe.com/flex/mx" width="984" height="400"
					creationComplete="init(event)">
	<fx:Script>
		
		<![CDATA[
			import app.model.Constantes;
			import app.model.DB;
			import app.model.Exame;
			import app.model.ExameAdicional;
			import app.model.ExameBioquimico;
			import app.skin.TextArea;
			import app.skin.TextInput;
			import app.util.General;
			
			import as3.utils.Mask;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.validators.StringValidator;
			import mx.validators.Validator;
			
			import nz.co.codec.flexorm.criteria.Criteria;
			
			import spark.components.HGroup;
			import spark.components.SkinnableContainer;
			import spark.components.TextArea;
			import spark.components.TextInput;
			
			private var focusedFormControl:DisplayObject;
			
			[Bindable]
			private var formIsValid:Boolean = true;
			
			[Bindable]
			private var exames:ArrayCollection = Constantes.exames;
			
			[Bindable]
			private var dataDoExame:* =  ( General.consultaAtual) ? General.consultaAtual.exameBioquimico.dataDoExame : General.getFormattedDate(new Date().toString());
			
			[Bindable]
			private var campos:Object;
			private var colors:Array = [0xF6F9FE,0xFCFDFF];
			private var quantidadeAdicionais:uint = 3;
			
			private function onMouseWheel(e:MouseEvent):void
			{
				e.delta = e.delta > 0 ? 1 : -1;
			}
			
			private function addValidator(f:*,msg:String = "Este campo é obrigatório"):void
			{
				var sv:StringValidator = new StringValidator();
				sv.property = "text";
				sv.required = true;
				sv.requiredFieldError = msg;
				sv.source = f;
				validators.push(sv);
			}
			
			private function getExames():ArrayCollection
			{
				var c:Criteria = DB.em.createCriteria(Exame);
				c.addEqualsCondition("ativo",true);
				return DB.em.fetchCriteria(c);
			}
			
			private function buildForm():void
			{
				var cc:uint = 0;
				var o:Object;
				campos = {};
				
				// Build
				for each(var exame:Exame in exames)
				{
					o = {};
					o['sc'] = new SkinnableContainer();
					o['sc'].setStyle("backgroundColor",colors[((cc%2) ? 0 : 1)]);
					o['sc'].width = 435;
					o['hg'] = new HGroup();
					with(o['hg'])
					{
						paddingTop = paddingRight = paddingBottom = paddingLeft = 5;
						gap = 10;
					}
					
					o['nome'] = new Label();
					o['nome'].text = exame.nome;
					o['nome'].width = 135;
					o['referencia'] = new Label();
					o['referencia'].text = exame.referencia;
					o['referencia'].width = 150;
					o['referencia'].styleName = "lightSmall";
					o['valor'] = new spark.components.TextInput();
					o['valor'].setStyle('skinClass', app.skin.TextInput);
					o['valor'].width = 90;
					
					o['hg'].addElement(o['nome']);
					o['hg'].addElement(o['referencia']);
					o['hg'].addElement(o['valor']);
					
					o['sc'].addElement(o['hg']);
					
					ExameGroup.addElement(o['sc']);
					campos[exame.nome] = o;
					
					cc++;
				}
				
				// Campos adicionais
				for(var adicional:uint = 0; adicional < quantidadeAdicionais; adicional++)
				{
					o = {};
					
					o['sc'] = new SkinnableContainer();
					o['sc'].setStyle("backgroundColor",colors[((cc%2) ? 0 : 1)]);
					o['sc'].width = 435;
					o['hg'] = new HGroup();
					with(o['hg'])
					{
						paddingTop = paddingRight = paddingBottom = paddingLeft = 5;
						gap = 10;
					}
					
					o['nome'] = new spark.components.TextInput();
					o['nome'].setStyle('skinClass', app.skin.TextInput);
					o['nome'].prompt = "Exame adicional";
					o['nome'].width = 135;
					o['referencia'] = new spark.components.TextArea();
					o['referencia'].setStyle('skinClass', app.skin.TextArea);
					o['referencia'].prompt = "Referência adicional";
					o['referencia'].width = 150;
					o['referencia'].height = 90;
					o['valor'] = new spark.components.TextInput();
					o['valor'].setStyle('skinClass', app.skin.TextInput);
					o['valor'].width = 90;
					
					o['hg'].addElement(o['nome']);
					o['hg'].addElement(o['referencia']);
					o['hg'].addElement(o['valor']);
					
					o['sc'].addElement(o['hg']);
					
					ExameGroup.addElement(o['sc']);
					campos['adicional_'+adicional] = o;
					
					cc++;
				}
				
				// Fill fields
				if(General.consultaAtual != null)
				{
					for each(var exameAdd:app.model.ExameAdicional in General.consultaAtual.exameBioquimico.exames)
					{
						campos[exameAdd.nome]['inputResult'].text = exameAdd.valor; 
					}
				}
			}
			
			private function init(event:FlexEvent):void
			{
				new Mask(txtDateExame, "99/99/9999" );
				
				exames = this.getExames();
				if(exames.length > 0)
				{
					this.buildForm();
				}
				
				scroller.addEventListener(MouseEvent.MOUSE_WHEEL, onMouseWheel, true); 
			}
			
			private function onSalvar(e:MouseEvent):void
			{
				// Verifica adicionais
				//*
				for(var adicional:uint = 0; adicional < quantidadeAdicionais; adicional++)
				{
					if((campos['adicional_'+adicional].nome.text == '' && campos['adicional_'+adicional].valor.text != ''))
					{
						this.addValidator(campos['adicional_'+adicional].nome);
					}
					if((campos['adicional_'+adicional].nome.text != '' && campos['adicional_'+adicional].valor.text == ''))
					{
						this.addValidator(campos['adicional_'+adicional].valor);
					}
				}
				//*/
				
				var erros:Array = Validator.validateAll(validators);
				formIsValid = (erros.length == 0) ? true : false;
				
				if(!formIsValid)
				{
					Alert.show("Existem erros no formulário. Por favor, valide os campos vermelhos", "Erro", Alert.OK );
					validators.pop();
				}
				else
				{
					var cc:uint = 0;
					var exameCollection:ArrayCollection = new ArrayCollection();
					
					for each (var i:Object in campos) 
					{
						var ea:ExameAdicional = new ExameAdicional();
						if( i['valor'].text != '' ){
							ea.nome = i['nome'].text;
							ea.referencia = i['referencia'].text;
							ea.valor = i['valor'].text;
							exameCollection.addItem(ea);
							cc++;
						}
					}
					
					if(cc > 0)
					{
						var eb:ExameBioquimico = new ExameBioquimico();
						eb.dataDoExame = txtDateExame.text;
						eb.exames = exameCollection;
						
						General.consultaAtual.exameBioquimico = eb;
						General.salvaConsulta();
					}
					else
					{
						Alert.show("Não há dados de exame para ser salvo!", "Erro", Alert.OK );
					}
				}
			}
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<fx:Array id="validators">
			<mx:StringValidator id="valDateExame" source="{txtDateExame}" property="text" required="true" requiredFieldError="O campo Data do Exame é obrigatório" />
		</fx:Array>
		<s:RadioButtonGroup id="NivelAtividade"/>
	</fx:Declarations>
	
	<s:Scroller id="scroller" x="0" y="0" width="984" height="390" skinClass="app.skin.Scroller">
		<s:VGroup width="984" height="390" gap="20" paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10">
			
			<s:Label color="#81BAEA" fontSize="20" styleName="bold" text="EXAMES BIOQUÍMICOS" />
			<s:VGroup gap="10" id="ExameGroup">
				<s:SkinnableContainer width="435" backgroundColor="#F6F9FE">
					<s:HGroup gap="10" paddingTop="5" paddingRight="5" paddingBottom="5" paddingLeft="5" variableColumnWidth="false" verticalAlign="middle">
						<s:Label width="135" text="Tipo do Exame" />
						<s:Label width="150" text="Referência" />
						<s:HGroup width="150" verticalAlign="middle">
							<s:Label text="Data" />
							<s:TextInput width="90" id="txtDateExame" skinClass="app.skin.TextInput" text="{dataDoExame}" />
						</s:HGroup>
					</s:HGroup>
				</s:SkinnableContainer>
			</s:VGroup>
			
			<s:Button label="SALVAR E VISUALIZAR IMPRESSÃO DE DADOS DESTA CONSULTA" skinClass="app.skin.Button" click="onSalvar(event)" />
	
		</s:VGroup>
	</s:Scroller>
</s:NavigatorContent>
