<?xml version="1.0" encoding="utf-8"?>
<s:NavigatorContent xmlns:fx="http://ns.adobe.com/mxml/2009" 
					xmlns:s="library://ns.adobe.com/flex/spark" 
					xmlns:mx="library://ns.adobe.com/flex/mx" width="1004" height="540"
					creationComplete="init(event)">
	<fx:Script>
		<![CDATA[
			import app.model.DB;
			import app.model.Paciente;
			import app.skin.WhiteButton;
			import app.util.General;
			
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			
			import nz.co.codec.flexorm.criteria.Criteria;
			import nz.co.codec.flexorm.criteria.LikeCondition;
			import nz.co.codec.flexorm.criteria.Sort;
			
			import spark.components.Button;
			
			[Bindable]
			public var pacientes:ArrayCollection =  new ArrayCollection();
			
			private var atualLetter:String = '';
			private var atualSort:String = 'nome';
			private var atualDirection:String = 'asc';
			
			private function init(event:FlexEvent):void
			{
				var letras:String = 'ABCDEFGHIJKLMNOPQRSTUWXYZ' ;
				var b:Button;
				
				b = new Button();
				b.label = 'TODOS';
				b.setStyle('skinClass', app.skin.WhiteButton);
				b.height = 30 ;
				b.addEventListener(MouseEvent.CLICK, onLetraClick);
				
				containerLetras.addElement(b);
				
				for (var i:int = 0; i < letras.length; i++) 
				{
					var letra:String = letras.charAt(i);
					b = new Button();
					b.label = letra.toUpperCase();
					b.setStyle('skinClass', app.skin.WhiteButton);
					b.width = 20 ;
					b.height = 30 ;
					b.addEventListener(MouseEvent.CLICK, onLetraClick);
					
					containerLetras.addElement(b);
				}
				
				b = new Button();
				b.label = "NOME" ;
				b.setStyle('skinClass', app.skin.WhiteButton);
				b.height = 30 ;
				b.addEventListener(MouseEvent.CLICK, onOrderClick );
				
				containerOrders.addElement(b);
				
				b = new Button();
				b.label = "SOBRENOME" ;
				b.setStyle('skinClass', app.skin.WhiteButton);
				b.height = 30 ;
				b.addEventListener(MouseEvent.CLICK, onOrderClick );
				
				containerOrders.addElement(b);
				
				b = new Button();
				b.label = "DATA" ;
				b.setStyle('skinClass', app.skin.WhiteButton);
				b.height = 30 ;
				b.right = 0 ;
				b.addEventListener(MouseEvent.CLICK, onOrderClick );
				
				containerOrders.addElement(b);
				
				listaPacientes();
			}
			
			public function listaPacientes():void
			{
				try
				{
					var c:Criteria = DB.em.createCriteria(Paciente);
					c.addEqualsCondition("usuario", General.usuario.id.toString() ) ;
					
					if( General.buscaAtual !=  '' ){
						c.addJunction(
							c.createOrJunction()
							.addLikeCondition("nome", General.buscaAtual)
							.addLikeCondition("sobrenome", General.buscaAtual)
						);
					} else {
						if( atualLetter != '' ) c.addLikeCondition("nome", atualLetter, LikeCondition.RIGHT);
					}

					if( atualSort != '' ){
						var sortDirection:String = atualDirection == 'DESC' ? Sort.DESC : Sort.ASC ;
						c.addSort(atualSort, sortDirection);
					}
					
					pacientes = DB.em.fetchCriteria(c);
//					trace('listaPacientes: '+ c);
				} 
				catch(error:Error) 
				{
					trace("Erro na consulta SQL", error.message, error.getStackTrace() );
				}
			}
			
			private function onOrderClick(e:MouseEvent):void
			{
				var b:Button = e.currentTarget as Button ;
				
				switch(b.label)
				{
					case 'NOME':
						if( atualSort == 'nome' ){
							atualDirection = atualDirection == 'DESC' ? 'ASC' : 'DESC' ;
						} else {
							atualSort = 'nome' ;
							atualDirection = 'ASC' ;
						}
						break;
					case 'SOBRENOME':
						if( atualSort == 'sobrenome' ){
							atualDirection = atualDirection == 'DESC' ? 'ASC' : 'DESC' ;
						} else {
							atualSort = 'sobrenome' ;
							atualDirection = 'ASC' ;
						}
						break;
					case 'DATA':
						if( atualSort == 'dataUltimaConsulta' ){
							atualDirection = atualDirection == 'DESC' ? 'ASC' : 'DESC' ;
						} else {
							atualSort = 'dataUltimaConsulta' ;
							atualDirection = 'ASC' ;
						}
						break;
				}
				
				listaPacientes();
			}
			
			private function onLetraClick(e:MouseEvent):void
			{
				General.buscaAtual = '' ;
				var texto:String = Button(e.currentTarget).label ;
				atualLetter = texto == 'TODOS' ? '' : texto ;
				listaPacientes();
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<s:Rect y="7" x="0" width="100%" height="43" radiusX="10" radiusY="10">
		<s:fill>
			<s:SolidColor color="#81BAEA" />
		</s:fill>
	</s:Rect>
	
	<s:HGroup id="containerLetras" left="0" y="8" height="43" paddingLeft="10" paddingTop="5" paddingRight="10" gap="5" />
	<s:HGroup id="containerOrders" right="0" top="8" paddingLeft="10" paddingTop="5" paddingRight="10" gap="5" />
	
	
	<s:DataGrid id="dgPacientes" left="10" top="63" right="10" bottom="0" dataProvider="{pacientes}" rowHeight="30" focusEnabled="false"
				alternatingRowColors="{[0xF6F9FE, 0xFCFDFF]}"
				skinClass="app.skin.DataGridSkin">
		<s:columns>
			<s:ArrayList>
				<s:GridColumn dataField="nome" headerText="Nome" minWidth="650">
					<s:itemRenderer>
						<fx:Component>
							<s:GridItemRenderer verticalCenter="1">
								
								<fx:Script>
									<![CDATA[
										import app.controller.Navigation;
										import app.enums.EAreas;
										import app.model.Paciente;
										import app.util.General;
										private function goPaciente(e:MouseEvent):void
										{
											var p:Paciente = data as Paciente;
											General.pacienteAtual = p;
											Navigation.navega(EAreas.CONSULTA);
										}
									]]>
								</fx:Script>
								
								<s:Button y="4" label="{data.nome.toUpperCase() + ' ' + data.sobrenome.toUpperCase()}" skinClass="app.skin.TextButton" buttonMode="true" click="goPaciente(event)" />
							</s:GridItemRenderer>
						</fx:Component>
					</s:itemRenderer>
				</s:GridColumn>
				
				<s:GridColumn dataField="nome" headerText="Data">
					<s:itemRenderer>
						<fx:Component>
							<s:GridItemRenderer>
								<fx:Script>
									<![CDATA[
										import app.util.General;
									]]>
								</fx:Script>
								<s:Button y="4" icon="assets/images/icoAgenda.png" label="{General.getFormattedDate(data.dataUltimaConsulta)}" skinClass="app.skin.TextButton" />
							</s:GridItemRenderer>
						</fx:Component>
					</s:itemRenderer>
				</s:GridColumn>
				
				<s:GridColumn  headerText="Editar">
					<s:itemRenderer>
						<fx:Component>
							<s:GridItemRenderer>
								
								<fx:Script>
									<![CDATA[
										import app.controller.Navigation;
										import app.enums.EAreas;
										import app.model.Paciente;
										import app.util.General;
										private function editarPaciente(event:MouseEvent):void
										{
											var p:Paciente = data as Paciente;
											General.pacienteAtual = p;
											Navigation.navega(EAreas.CADASTRO_PACIENTE);
										}
									]]>
								</fx:Script>
								
								<s:Button y="4" icon="assets/images/icoEditar.png" label="EDITAR PACIENTE" skinClass="app.skin.TextButton" buttonMode="true" click="editarPaciente(event)" />
							</s:GridItemRenderer>
						</fx:Component>
					</s:itemRenderer>
				</s:GridColumn>
			</s:ArrayList>
		</s:columns>
	</s:DataGrid>
	
</s:NavigatorContent>
